var U=Object.defineProperty;var N=(w,n,t)=>n in w?U(w,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):w[n]=t;var h=(w,n,t)=>(N(w,typeof n!="symbol"?n+"":n,t),t);import{aI as R,a$ as l,aS as O,aR as $,bM as F,bN as T,a1 as W,a2 as x,bO as D,a4 as M,a5 as V,A as z,B as m,b5 as y,ae as A,a6 as f,a7 as k,ak as _,an as K,bP as B,_ as E,bQ as Q}from"./index.b8b39119.js";import{h as Y}from"./hasERC20Allowance-f31216a8.browser.esm.5fa5383f.js";import{R as j,a as G}from"./assertEnabled-993354c0.browser.esm.18458c2f.js";import{C as H,a as Z,G as J,b as L,d as X}from"./contract-appuri-c5be7b04.browser.esm.a5500bdc.js";import{a as b}from"./marketplace-9e29ab16.browser.esm.42fe9f0f.js";import{b as tt}from"./QueryParams-3376d6a8.browser.esm.b01ff5ba.js";import{C as rt}from"./contract-interceptor-d7b164a7.browser.esm.b65ebba9.js";import{C as et,a as at}from"./contract-owner-bfdb8e71.browser.esm.5ea689bb.js";import{C as nt}from"./contract-roles-cd4f001b.browser.esm.5f967575.js";import{S as st}from"./erc-1155-standard-4e8152c4.browser.esm.199fb41d.js";import{E as ot}from"./erc-20-2d8b7df7.browser.esm.83633c32.js";import{N as ct}from"./setErc20Allowance-db4e8402.browser.esm.6b5789eb.js";import"./index.532955a9.js";import"./treeify.b8112f75.js";import"./erc-1155-27d7fe97.browser.esm.56aa63e0.js";import"./drop-claim-conditions-8a3ca2fb.browser.esm.6ff0b9c1.js";const v=(()=>R.object({contractAddress:$}))(),dt=(()=>v.extend({quantity:O}))(),it=(()=>v.extend({tokenId:l}))(),pt=(()=>v.extend({tokenId:l,quantity:l}))(),ut=(()=>dt.omit({quantity:!0}).extend({quantityPerReward:O}))(),ht=it,gt=(()=>pt.omit({quantity:!0}).extend({quantityPerReward:l}))(),mt=(()=>ut.extend({totalRewards:l.default("1")}))(),lt=ht,wt=(()=>gt.extend({totalRewards:l.default("1")}))(),q=(()=>R.object({erc20Rewards:R.array(mt).default([]),erc721Rewards:R.array(lt).default([]),erc1155Rewards:R.array(wt).default([])}))(),ft=(()=>q.extend({packMetadata:ct,rewardsPerPack:l.default("1"),openStartTime:j.default(new Date)}))();class kt{constructor(n,t,a,s,e){h(this,"featureName",T.name);h(this,"open",f((()=>{var n=this;return async function(t){let a=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1,s=arguments.length>2&&arguments[2]!==void 0?arguments[2]:5e5;return k.fromContractWrapper({contractWrapper:n.contractWrapper,method:"openPack",args:[t,a],overrides:{gasLimit:s},parse:e=>{let o=m.from(0);try{o=n.contractWrapper.parseLogs("PackOpenRequested",e?.logs)[0].args.requestId}catch{}return{receipt:e,id:o}}})}})()));h(this,"claimRewards",f((()=>{var n=this;return async function(){let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:5e5;return k.fromContractWrapper({contractWrapper:n.contractWrapper,method:"claimRewards",args:[],overrides:{gasLimit:t},parse:async a=>{const s=n.contractWrapper.parseLogs("PackOpened",a?.logs);if(s.length===0)throw new Error("PackOpened event not found");const e=s[0].args.rewardUnitsDistributed;return await n.parseRewards(e)}})}})()));let o=arguments.length>5&&arguments[5]!==void 0?arguments[5]:new W(n,t,B,s,a);this.contractWrapper=o,this.storage=a,this.chainId=e,this.events=new L(this.contractWrapper)}onNetworkUpdated(n){this.contractWrapper.updateSignerOrProvider(n)}getAddress(){return this.contractWrapper.address}async parseRewards(n){const t=[],a=[],s=[];for(const e of n)switch(e.tokenType){case 0:{const o=await y(this.contractWrapper.getProvider(),e.assetContract);t.push({contractAddress:e.assetContract,quantityPerReward:A(e.totalAmount,o.decimals).toString()});break}case 1:{a.push({contractAddress:e.assetContract,tokenId:e.tokenId.toString()});break}case 2:{s.push({contractAddress:e.assetContract,tokenId:e.tokenId.toString(),quantityPerReward:e.totalAmount.toString()});break}}return{erc20Rewards:t,erc721Rewards:a,erc1155Rewards:s}}async addPackOpenEventListener(n){return this.events.addEventListener("PackOpened",async t=>{n(t.data.packId.toString(),t.data.opener,await this.parseRewards(t.data.rewardUnitsDistributed))})}async canClaimRewards(n){const t=await _(n||await this.contractWrapper.getSignerAddress());return await this.contractWrapper.read("canClaimRewards",[t])}async openAndClaim(n){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1,a=arguments.length>2&&arguments[2]!==void 0?arguments[2]:5e5;const s=await this.contractWrapper.sendTransaction("openPackAndClaimRewards",[n,t,a],{gasLimit:m.from(5e5)});let e=m.from(0);try{e=this.contractWrapper.parseLogs("PackOpenRequested",s?.logs)[0].args.requestId}catch{}return{receipt:s,id:e}}async getLinkBalance(){const n=(await E(()=>import("./index.b8b39119.js").then(t=>t.el),["assets/index.b8b39119.js","assets/index.274eef26.css"])).default;return this.getLinkContract(n).balanceOf(this.contractWrapper.address)}async transferLink(n){const t=(await E(()=>import("./index.b8b39119.js").then(a=>a.el),["assets/index.b8b39119.js","assets/index.274eef26.css"])).default;await this.getLinkContract(t).transfer(this.contractWrapper.address,n)}getLinkContract(n){const t=Q[this.chainId];if(!t)throw new Error(`No LINK token address found for chainId ${this.chainId}`);const a=new W(this.contractWrapper.getSignerOrProvider(),t,n,this.contractWrapper.options,this.storage);return new ot(a,this.storage,this.chainId)}}const P=class extends st{constructor(t,a,s){let e=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},o=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0,p=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new W(t,a,o,e.gasless&&"openzeppelin"in e.gasless?{...e,gasless:{...e.gasless,openzeppelin:{...e.gasless.openzeppelin,useEOAForwarder:!0}}}:e,s);super(p,s,i);h(this,"create",f(async t=>{const a=await this.contractWrapper.getSignerAddress();return this.createTo.prepare(a,t)}));h(this,"addPackContents",f(async(t,a)=>{const[s,e]=await Promise.all([this.contractWrapper.getSignerAddress(),q.parseAsync(a)]),{contents:o,numOfRewardUnits:i}=await this.toPackContentArgs(e);return k.fromContractWrapper({contractWrapper:this.contractWrapper,method:"addPackContents",args:[t,o,i,s],parse:p=>{const c=this.contractWrapper.parseLogs("PackUpdated",p?.logs);if(c.length===0)throw new Error("PackUpdated event not found");const r=c[0].args.packId;return{id:r,receipt:p,data:()=>this.erc1155.get(r)}}})}));h(this,"createTo",f(async(t,a)=>{const[s,e,o]=await Promise.all([tt(a.packMetadata,this.storage),ft.parseAsync(a),_(t)]),{erc20Rewards:i,erc721Rewards:p,erc1155Rewards:c}=e,r={erc20Rewards:i,erc721Rewards:p,erc1155Rewards:c},{contents:u,numOfRewardUnits:d}=await this.toPackContentArgs(r);return k.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createPack",args:[u,d,s,e.openStartTime,e.rewardsPerPack,o],parse:g=>{const I=this.contractWrapper.parseLogs("PackCreated",g?.logs);if(I.length===0)throw new Error("PackCreated event not found");const S=I[0].args.packId;return{id:S,receipt:g,data:()=>this.erc1155.get(S)}}})}));h(this,"open",f((()=>{var t=this;return async function(a){let s=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1,e=arguments.length>2&&arguments[2]!==void 0?arguments[2]:5e5;if(t._vrf)throw new Error("This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead");return k.fromContractWrapper({contractWrapper:t.contractWrapper,method:"openPack",args:[a,s],overrides:{gasLimit:e},parse:async o=>{const i=t.contractWrapper.parseLogs("PackOpened",o?.logs);if(i.length===0)throw new Error("PackOpened event not found");const p=i[0].args.rewardUnitsDistributed,c=[],r=[],u=[];for(const d of p)switch(d.tokenType){case 0:{const g=await y(t.contractWrapper.getProvider(),d.assetContract);c.push({contractAddress:d.assetContract,quantityPerReward:A(d.totalAmount,g.decimals).toString()});break}case 1:{r.push({contractAddress:d.assetContract,tokenId:d.tokenId.toString()});break}case 2:{u.push({contractAddress:d.assetContract,tokenId:d.tokenId.toString(),quantityPerReward:d.totalAmount.toString()});break}}return{erc20Rewards:c,erc721Rewards:r,erc1155Rewards:u}}})}})()));this.abi=x.parse(o||[]),this.metadata=new H(this.contractWrapper,D,this.storage),this.app=new Z(this.contractWrapper,this.metadata,this.storage),this.roles=new nt(this.contractWrapper,P.contractRoles),this.royalties=new et(this.contractWrapper,this.metadata),this.encoder=new M(this.contractWrapper),this.estimator=new J(this.contractWrapper),this.events=new L(this.contractWrapper),this.interceptor=new rt(this.contractWrapper),this.owner=new at(this.contractWrapper),this._vrf=this.detectVrf()}get vrf(){return G(this._vrf,T)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t),this._vrf?.onNetworkUpdated(t)}getAddress(){return this.contractWrapper.address}async get(t){return this.erc1155.get(t)}async getAll(t){return this.erc1155.getAll(t)}async getOwned(t){return this.erc1155.getOwned(t)}async getTotalCount(){return this.erc1155.totalCount()}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[V("transfer"),z])}async getPackContents(t){const{contents:a,perUnitAmounts:s}=await this.contractWrapper.read("getPackContents",[t]),e=[],o=[],i=[];for(let p=0;p<a.length;p++){const c=a[p],r=s[p];switch(c.tokenType){case 0:{const u=await y(this.contractWrapper.getProvider(),c.assetContract),d=A(r,u.decimals),g=A(m.from(c.totalAmount).div(r),u.decimals);e.push({contractAddress:c.assetContract,quantityPerReward:d,totalRewards:g});break}case 1:{o.push({contractAddress:c.assetContract,tokenId:c.tokenId.toString()});break}case 2:{i.push({contractAddress:c.assetContract,tokenId:c.tokenId.toString(),quantityPerReward:r.toString(),totalRewards:m.from(c.totalAmount).div(r).toString()});break}}}return{erc20Rewards:e,erc721Rewards:o,erc1155Rewards:i}}async toPackContentArgs(t){const a=[],s=[],{erc20Rewards:e,erc721Rewards:o,erc1155Rewards:i}=t,p=this.contractWrapper.getProvider(),c=await this.contractWrapper.getSignerAddress();for(const r of e){const d=(await K(p,r.quantityPerReward,r.contractAddress)).mul(r.totalRewards);if(!await Y(this.contractWrapper,r.contractAddress,d))throw new Error(`ERC20 token with contract address "${r.contractAddress}" does not have enough allowance to transfer.

You can set allowance to the multiwrap contract to transfer these tokens by running:

await sdk.getToken("${r.contractAddress}").setAllowance("${this.getAddress()}", ${d});

`);s.push(r.totalRewards),a.push({assetContract:r.contractAddress,tokenType:0,totalAmount:d,tokenId:0})}for(const r of o){if(!await b(this.contractWrapper.getProvider(),this.getAddress(),r.contractAddress,r.tokenId,c))throw new Error(`ERC721 token "${r.tokenId}" with contract address "${r.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getNFTCollection("${r.contractAddress}").setApprovalForToken("${this.getAddress()}", ${r.tokenId});

`);s.push("1"),a.push({assetContract:r.contractAddress,tokenType:1,totalAmount:1,tokenId:r.tokenId})}for(const r of i){if(!await b(this.contractWrapper.getProvider(),this.getAddress(),r.contractAddress,r.tokenId,c))throw new Error(`ERC1155 token "${r.tokenId}" with contract address "${r.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getEdition("${r.contractAddress}").setApprovalForAll("${this.getAddress()}", true);

`);s.push(r.totalRewards),a.push({assetContract:r.contractAddress,tokenType:2,totalAmount:m.from(r.quantityPerReward).mul(m.from(r.totalRewards)),tokenId:r.tokenId})}return{contents:a,numOfRewardUnits:s}}async prepare(t,a,s){return k.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:a,overrides:s})}async call(t,a,s){return this.contractWrapper.call(t,a,s)}detectVrf(){if(X(this.contractWrapper,"PackVRF"))return new kt(this.contractWrapper.getSignerOrProvider(),this.contractWrapper.address,this.storage,this.contractWrapper.options,this.chainId)}};let C=P;h(C,"contractRoles",F);export{C as Pack};

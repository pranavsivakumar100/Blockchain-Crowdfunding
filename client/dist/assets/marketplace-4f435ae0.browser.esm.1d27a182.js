var G=Object.defineProperty;var U=(g,t,r)=>t in g?G(g,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):g[t]=r;var i=(g,t,r)=>(U(g,typeof t!="symbol"?t+"":t,r),r);import{bd as V,a1 as z,a2 as K,be as H,a4 as M,A as w,bf as A,B as s,a5 as C,a6 as c,as as v,aP as _,bg as Y,a7 as p,bh as I,ak as W,an as L,b5 as j,ae as Q,aK as q,bi as Z,bj as O,b2 as P,bk as J,_ as k,C as b}from"./index.b8b39119.js";import{D as X,f as D,I as tt,c as rt}from"./QueryParams-3376d6a8.browser.esm.b01ff5ba.js";import{m as B,v as N,h as x,i as et,a as at}from"./marketplace-9e29ab16.browser.esm.42fe9f0f.js";import{C as nt,a as st,G as ot,b as F}from"./contract-appuri-c5be7b04.browser.esm.a5500bdc.js";import{C as it}from"./contract-interceptor-d7b164a7.browser.esm.b65ebba9.js";import{C as ct}from"./contract-platform-fee-91638472.browser.esm.73675b7f.js";import{C as dt}from"./contract-roles-cd4f001b.browser.esm.5f967575.js";import{c as $}from"./cleanCurrencyAddress-26666487.browser.esm.34ede101.js";import{s as E}from"./setErc20Allowance-db4e8402.browser.esm.6b5789eb.js";let m=function(g){return g[g.Direct=0]="Direct",g[g.Auction=1]="Auction",g}({});class pt{constructor(t,r){i(this,"createListing",c(async t=>{N(t);const r=await W(t.assetContractAddress),e=await W(t.currencyContractAddress);await x(this.contractWrapper,this.getAddress(),r,t.tokenId,await this.contractWrapper.getSignerAddress());const a=await L(this.contractWrapper.getProvider(),t.buyoutPricePerToken,e),n=await L(this.contractWrapper.getProvider(),t.reservePricePerToken,e);let o=Math.floor(t.startTimestamp.getTime()/1e3);const u=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;o<u&&(o=u);const d=p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createListing",args:[{assetContract:r,tokenId:t.tokenId,buyoutPricePerToken:a,currencyToAccept:$(e),listingType:m.Auction,quantityToList:t.quantity,reservePricePerToken:n,secondsUntilEndTime:t.listingDurationInSeconds,startTime:s.from(o)}],parse:f=>({id:this.contractWrapper.parseLogs("ListingAdded",f?.logs)[0].args.listingId,receipt:f})});return d.setGasLimitMultiple(1.2),d}));i(this,"createListingsBatch",c(async t=>{const r=(await Promise.all(t.map(a=>this.createListing.prepare(a)))).map(a=>a.encode()),e=p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r],parse:a=>this.contractWrapper.parseLogs("ListingAdded",a?.logs).map(o=>({id:o.args.listingId,receipt:a}))});return e.setGasLimitMultiple(1.2),e}));i(this,"buyoutListing",c(async t=>{const r=await this.validateListing(s.from(t)),e=await j(this.contractWrapper.getProvider(),r.currencyContractAddress);return this.makeBid.prepare(t,Q(r.buyoutPrice,e.decimals))}));i(this,"makeBid",c(async(t,r)=>{const e=await this.validateListing(s.from(t)),a=await L(this.contractWrapper.getProvider(),r,e.currencyContractAddress);if(a.eq(s.from(0)))throw new Error("Cannot make a bid with 0 value");const n=await this.contractWrapper.read("bidBufferBps",[]),o=await this.getWinningBid(t);if(o){const l=et(o.pricePerToken,a,n);v(l,"Bid price is too low based on the current winning bid and the bid buffer")}else{const l=a,y=s.from(e.reservePrice);v(l.gte(y),"Bid price is too low based on reserve price")}const h=s.from(e.quantity),u=a.mul(h),d=await this.contractWrapper.getCallOverrides()||{};await E(this.contractWrapper,u,e.currencyContractAddress,d);const f=p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"offer",args:[t,e.quantity,e.currencyContractAddress,a,q],overrides:d});return f.setGasLimitMultiple(1.2),f}));i(this,"cancelListing",c(async t=>{const r=await this.validateListing(s.from(t)),e=s.from(Math.floor(Date.now()/1e3)),a=s.from(r.startTimeInEpochSeconds),n=await this.contractWrapper.read("winningBid",[t]);if(e.gt(a)&&n.offeror!==w)throw new Z(t.toString());const o=p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"closeAuction",args:[s.from(t),await this.contractWrapper.getSignerAddress()]});return o.setGasLimitMultiple(1.2),o}));i(this,"closeListing",c(async(t,r)=>{r||(r=await this.contractWrapper.getSignerAddress());const e=await this.validateListing(s.from(t));try{const a=p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"closeAuction",args:[s.from(t),r]});return a.setGasLimitMultiple(1.2),a}catch(a){throw a.message.includes("cannot close auction before it has ended")?new O(t.toString(),e.endTimeInEpochSeconds.toString()):a}}));i(this,"executeSale",c(async t=>{const r=await this.validateListing(s.from(t));try{const e=await this.getWinningBid(t);v(e,"No winning bid found");const a=this.encoder.encode("closeAuction",[t,r.sellerAddress]),n=this.encoder.encode("closeAuction",[t,e.buyerAddress]),o=p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[a,n]});return o.setGasLimitMultiple(1.2),o}catch(e){throw e.message.includes("cannot close auction before it has ended")?new O(t.toString(),r.endTimeInEpochSeconds.toString()):e}}));i(this,"updateListing",c(async t=>{const r=p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateListing",args:[t.id,t.quantity,t.reservePrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInEpochSeconds,t.endTimeInEpochSeconds]});return r.setGasLimitMultiple(1.2),r}));this.contractWrapper=t,this.storage=r,this.encoder=new M(t)}getAddress(){return this.contractWrapper.address}async getListing(t){const r=await this.contractWrapper.read("listings",[t]);if(r.listingId.toString()!==t.toString())throw new A(this.getAddress(),t.toString());if(r.listingType!==m.Auction)throw new I(this.getAddress(),t.toString(),"Direct","Auction");return await this.mapListing(r)}async getWinningBid(t){await this.validateListing(s.from(t));const r=await this.contractWrapper.read("winningBid",[t]);if(r.offeror!==w)return await B(this.contractWrapper.getProvider(),s.from(t),r)}async getWinner(t){const r=await this.validateListing(s.from(t)),e=await this.contractWrapper.read("winningBid",[t]),a=s.from(Math.floor(Date.now()/1e3)),n=s.from(r.endTimeInEpochSeconds);if(a.gt(n)&&e.offeror!==w)return e.offeror;const u=(await new F(this.contractWrapper).getEvents("AuctionClosed")).find(d=>d.data.listingId.eq(s.from(t)));if(!u)throw new Error(`Could not find auction with listingId ${t} in closed auctions`);return u.data.winningBidder}async getBidBufferBps(){return this.contractWrapper.read("bidBufferBps",[])}async getMinimumNextBid(t){const[r,e,a]=await Promise.all([this.getBidBufferBps(),this.getWinningBid(t),this.validateListing(s.from(t))]),n=e?e.currencyValue.value:a.reservePrice,o=n.add(n.mul(r).div(1e4));return P(this.contractWrapper.getProvider(),a.currencyContractAddress,o)}async validateListing(t){try{return await this.getListing(t)}catch(r){throw console.error(`Error getting the listing with id ${t}`),r}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:s.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await P(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInEpochSeconds:t.startTime,asset:await D(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),reservePriceCurrencyValuePerToken:await P(this.contractWrapper.getProvider(),t.currency,t.reservePricePerToken),reservePrice:s.from(t.reservePricePerToken),endTimeInEpochSeconds:t.endTime,sellerAddress:t.tokenOwner,type:m.Auction}}}class ut{constructor(t,r){i(this,"createListing",c(async t=>{N(t);const r=await W(t.assetContractAddress),e=await W(t.currencyContractAddress);await x(this.contractWrapper,this.getAddress(),r,t.tokenId,await this.contractWrapper.getSignerAddress());const a=await L(this.contractWrapper.getProvider(),t.buyoutPricePerToken,e);let n=Math.floor(t.startTimestamp.getTime()/1e3);const h=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;n<h&&(n=h);const u=p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createListing",args:[{assetContract:r,tokenId:t.tokenId,buyoutPricePerToken:a,currencyToAccept:$(e),listingType:m.Direct,quantityToList:t.quantity,reservePricePerToken:a,secondsUntilEndTime:t.listingDurationInSeconds,startTime:s.from(n)}],parse:d=>({id:this.contractWrapper.parseLogs("ListingAdded",d?.logs)[0].args.listingId,receipt:d})});return u.setGasLimitMultiple(1.2),u}));i(this,"createListingsBatch",c(async t=>{const r=(await Promise.all(t.map(a=>this.createListing.prepare(a)))).map(a=>a.encode()),e=p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r],parse:a=>this.contractWrapper.parseLogs("ListingAdded",a?.logs).map(o=>({id:o.args.listingId,receipt:a}))});return e.setGasLimitMultiple(1.2),e}));i(this,"makeOffer",c(async(t,r,e,a,n)=>{if(_(e))throw new Error("You must use the wrapped native token address when making an offer with a native token");const o=await L(this.contractWrapper.getProvider(),a,e);try{await this.getListing(t)}catch(y){throw console.error("Failed to get listing, err =",y),new Error(`Error getting the listing with id ${t}`)}const h=s.from(r),u=s.from(o).mul(h),d=await this.contractWrapper.getCallOverrides()||{};await E(this.contractWrapper,u,e,d);let f=q;n&&(f=s.from(Math.floor(n.getTime()/1e3)));const l=p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"offer",args:[t,r,e,o,f],overrides:d});return l.setGasLimitMultiple(1.2),l}));i(this,"acceptOffer",c(async(t,r)=>{await this.validateListing(s.from(t));const e=await W(r),a=await this.contractWrapper.read("offers",[t,e]),n=p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"acceptOffer",args:[t,e,a.currency,a.pricePerToken]});return n.setGasLimitMultiple(1.2),n}));i(this,"buyoutListing",c(async(t,r,e)=>{const a=await this.validateListing(s.from(t)),{valid:n,error:o}=await this.isStillValidListing(a,r);if(!n)throw new Error(`Listing ${t} is no longer valid. ${o}`);const h=e||await this.contractWrapper.getSignerAddress(),u=s.from(r),d=s.from(a.buyoutPrice).mul(u),f=await this.contractWrapper.getCallOverrides()||{};await E(this.contractWrapper,d,a.currencyContractAddress,f);const l=p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"buy",args:[t,h,u,a.currencyContractAddress,d],overrides:f});return l.setGasLimitMultiple(1.2),l}));i(this,"updateListing",c(async t=>{const r=p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateListing",args:[t.id,t.quantity,t.buyoutPrice,t.buyoutPrice,await W(t.currencyContractAddress),t.startTimeInSeconds,t.secondsUntilEnd]});return r.setGasLimitMultiple(1.2),r}));i(this,"cancelListing",c(async t=>{const r=p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancelDirectListing",args:[t]});return r.setGasLimitMultiple(1.2),r}));this.contractWrapper=t,this.storage=r}getAddress(){return this.contractWrapper.address}async getListing(t){const r=await this.contractWrapper.read("listings",[t]);if(r.assetContract===w)throw new A(this.getAddress(),t.toString());if(r.listingType!==m.Direct)throw new I(this.getAddress(),t.toString(),"Auction","Direct");return await this.mapListing(r)}async getActiveOffer(t,r){await this.validateListing(s.from(t)),v(J(r),"Address must be a valid address");const e=await this.contractWrapper.read("offers",[t,await W(r)]);if(e.offeror!==w)return await B(this.contractWrapper.getProvider(),s.from(t),e)}async validateListing(t){try{return await this.getListing(t)}catch(r){throw console.error(`Error getting the listing with id ${t}`),r}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:s.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await P(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInSeconds:t.startTime,asset:await D(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),secondsUntilEnd:t.endTime,sellerAddress:t.tokenOwner,type:m.Direct}}async isStillValidListing(t,r){if(!await at(this.contractWrapper.getProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,t.sellerAddress))return{valid:!1,error:`Token '${t.tokenId}' from contract '${t.assetContractAddress}' is not approved for transfer`};const a=this.contractWrapper.getProvider(),n=(await k(()=>import("./IERC165.d81707d1.js"),[])).default,o=new b(t.assetContractAddress,n,a),h=await o.supportsInterface(tt),u=await o.supportsInterface(rt);if(h){const d=(await k(()=>import("./index.b8b39119.js").then(T=>T.em),["assets/index.b8b39119.js","assets/index.274eef26.css"])).default,f=new b(t.assetContractAddress,d,a);let l;try{l=await f.ownerOf(t.tokenId)}catch{}const y=l?.toLowerCase()===t.sellerAddress.toLowerCase();return{valid:y,error:y?void 0:`Seller is not the owner of Token '${t.tokenId}' from contract '${t.assetContractAddress} anymore'`}}else if(u){const d=(await k(()=>import("./index.b8b39119.js").then(T=>T.eo),["assets/index.b8b39119.js","assets/index.274eef26.css"])).default,y=(await new b(t.assetContractAddress,d,a).balanceOf(t.sellerAddress,t.tokenId)).gte(r||t.quantity);return{valid:y,error:y?void 0:`Seller does not have enough balance of Token '${t.tokenId}' from contract '${t.assetContractAddress} to fulfill the listing`}}else return{valid:!1,error:"Contract does not implement ERC 1155 or ERC 721."}}}const R=class{constructor(t,r,e){i(this,"getAll",this.getAllListings);i(this,"buyoutListing",c(async(t,r,e)=>{const a=await this.contractWrapper.read("listings",[t]);if(a.listingId.toString()!==t.toString())throw new A(this.getAddress(),t.toString());switch(a.listingType){case m.Direct:return v(r!==void 0,"quantityDesired is required when buying out a direct listing"),await this.direct.buyoutListing.prepare(t,r,e);case m.Auction:return await this.auction.buyoutListing.prepare(t);default:throw Error(`Unknown listing type: ${a.listingType}`)}}));i(this,"makeOffer",c(async(t,r,e)=>{const a=await this.contractWrapper.read("listings",[t]);if(a.listingId.toString()!==t.toString())throw new A(this.getAddress(),t.toString());const n=await this.contractWrapper.getChainID();switch(a.listingType){case m.Direct:return v(e,"quantity is required when making an offer on a direct listing"),await this.direct.makeOffer.prepare(t,e,_(a.currency)?Y[n].wrapped.address:a.currency,r);case m.Auction:return await this.auction.makeBid.prepare(t,r);default:throw Error(`Unknown listing type: ${a.listingType}`)}}));i(this,"setBidBufferBps",c(async t=>{await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());const r=await this.getTimeBufferInSeconds();return p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setAuctionBuffers",args:[r,s.from(t)]})}));i(this,"setTimeBufferInSeconds",c(async t=>{await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());const r=await this.getBidBufferBps();return p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setAuctionBuffers",args:[s.from(t),r]})}));i(this,"allowListingFromSpecificAssetOnly",c(async t=>{const r=[];return(await this.roles.get("asset")).includes(w)&&r.push(this.encoder.encode("revokeRole",[C("asset"),w])),r.push(this.encoder.encode("grantRole",[C("asset"),t])),p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r]})}));i(this,"allowListingFromAnyAsset",c(async()=>{const t=[],r=await this.roles.get("asset");for(const e in r)t.push(this.encoder.encode("revokeRole",[C("asset"),e]));return t.push(this.encoder.encode("grantRole",[C("asset"),w])),p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[t]})}));let a=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},n=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0,h=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new z(t,r,n,a,e);this._chainId=o,this.abi=K.parse(n||[]),this.contractWrapper=h,this.storage=e,this.metadata=new nt(this.contractWrapper,H,this.storage),this.app=new st(this.contractWrapper,this.metadata,this.storage),this.roles=new dt(this.contractWrapper,R.contractRoles),this.encoder=new M(this.contractWrapper),this.estimator=new ot(this.contractWrapper),this.direct=new ut(this.contractWrapper,this.storage),this.auction=new pt(this.contractWrapper,this.storage),this.events=new F(this.contractWrapper),this.platformFees=new ct(this.contractWrapper),this.interceptor=new it(this.contractWrapper)}get chainId(){return this._chainId}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async getListing(t){const r=await this.contractWrapper.read("listings",[t]);if(r.assetContract===w)throw new A(this.getAddress(),t.toString());switch(r.listingType){case m.Auction:return await this.auction.mapListing(r);case m.Direct:return await this.direct.mapListing(r);default:throw new Error(`Unknown listing type: ${r.listingType}`)}}async getActiveListings(t){const r=await this.getAllListingsNoFilter(!0),e=this.applyFilter(r,t),a=s.from(Math.floor(Date.now()/1e3));return e.filter(n=>n.type===m.Auction&&s.from(n.endTimeInEpochSeconds).gt(a)&&s.from(n.startTimeInEpochSeconds).lte(a)||n.type===m.Direct&&s.from(n.quantity).gt(0))}async getAllListings(t){const r=await this.getAllListingsNoFilter(!1);return this.applyFilter(r,t)}async getTotalCount(){return await this.contractWrapper.read("totalListings",[])}async isRestrictedToListerRoleOnly(){return!await this.contractWrapper.read("hasRole",[C("lister"),w])}async getBidBufferBps(){return this.contractWrapper.read("bidBufferBps",[])}async getTimeBufferInSeconds(){return this.contractWrapper.read("timeBuffer",[])}async getOffers(t){const r=await this.events.getEvents("NewOffer",{order:"desc",filters:{listingId:t}});return await Promise.all(r.map(e=>B(this.contractWrapper.getProvider(),s.from(t),{quantityWanted:e.data.quantityWanted,pricePerToken:e.data.quantityWanted.gt(0)?e.data.totalOfferAmount.div(e.data.quantityWanted):e.data.totalOfferAmount,currency:e.data.currency,offeror:e.data.offeror})))}async getAllListingsNoFilter(t){return(await Promise.all(Array.from(Array((await this.contractWrapper.read("totalListings",[])).toNumber()).keys()).map(async e=>{let a;try{a=await this.getListing(e)}catch(n){if(n instanceof A)return;console.warn(`Failed to get listing ${e}' - skipping. Try 'marketplace.getListing(${e})' to get the underlying error.`);return}if(a.type===m.Auction)return a;if(t){const{valid:n}=await this.direct.isStillValidListing(a);if(!n)return}return a}))).filter(e=>e!==void 0)}applyFilter(t,r){let e=[...t];const a=s.from(r?.start||0).toNumber(),n=s.from(r?.count||X).toNumber();return r&&(r.seller&&(e=e.filter(o=>o.sellerAddress.toString().toLowerCase()===r?.seller?.toString().toLowerCase())),r.tokenContract&&(e=e.filter(o=>o.assetContractAddress.toString().toLowerCase()===r?.tokenContract?.toString().toLowerCase())),r.tokenId!==void 0&&(e=e.filter(o=>o.tokenId.toString()===r?.tokenId?.toString())),e=e.filter((o,h)=>h>=a),e=e.slice(0,n)),e}async prepare(t,r,e){return p.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:e})}async call(t,r,e){return this.contractWrapper.call(t,r,e)}};let S=R;i(S,"contractRoles",V);export{S as Marketplace};

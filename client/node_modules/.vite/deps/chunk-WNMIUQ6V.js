import {
  ContractEncoder,
  hasFunction
} from "./chunk-LXY7U6R5.js";
import {
  FEATURE_PERMISSIONS,
  MissingRoleError,
  Transaction,
  buildTransactionFunction,
  getRoleHash,
  invariant,
  resolveAddress
} from "./chunk-CFECTRPO.js";
import {
  init_shim
} from "./chunk-6E35MBRA.js";
import {
  __publicField
} from "./chunk-IJ7IQSKN.js";

// node_modules/@thirdweb-dev/sdk/dist/contract-roles-cd4f001b.browser.esm.js
init_shim();
var ContractRoles = class {
  constructor(contractWrapper, roles) {
    __publicField(this, "featureName", FEATURE_PERMISSIONS.name);
    __publicField(this, "setAll", buildTransactionFunction(async (rolesWithAddresses, actingAddress) => {
      const connectedWalletAddress = actingAddress || await this.contractWrapper.getSignerAddress();
      const contractEncoder = new ContractEncoder(this.contractWrapper);
      const roles = Object.keys(rolesWithAddresses);
      invariant(roles.length, "you must provide at least one role to set");
      invariant(roles.every((role) => this.roles.includes(role)), "this contract does not support the given role");
      const currentRoles = await this.getAll();
      const encoded = [];
      const sortedRoles = roles.sort((role) => role === "admin" ? 1 : -1);
      for (let i = 0; i < sortedRoles.length; i++) {
        const role = sortedRoles[i];
        const [addresses, currentAddresses] = await Promise.all([Promise.all(rolesWithAddresses[role]?.map((addressOrEns) => resolveAddress(addressOrEns)) || []), Promise.all(currentRoles[role]?.map((addressOrEns) => resolveAddress(addressOrEns)) || [])]);
        const toAdd = addresses.filter((address) => !currentAddresses.includes(address));
        const toRemove = currentAddresses.filter((address) => !addresses.includes(address));
        if (toRemove.length > 1) {
          const index = toRemove.indexOf(connectedWalletAddress);
          if (index > -1) {
            toRemove.splice(index, 1);
            toRemove.push(connectedWalletAddress);
          }
        }
        if (toAdd.length) {
          toAdd.forEach((address) => {
            encoded.push(contractEncoder.encode("grantRole", [getRoleHash(role), address]));
          });
        }
        if (toRemove.length) {
          const revokeFunctionNames = await Promise.all(toRemove.map((address) => this.getRevokeRoleFunctionName(address)));
          revokeFunctionNames.forEach((revokeFunctionName, index) => encoded.push(contractEncoder.encode(revokeFunctionName, [getRoleHash(role), toRemove[index]])));
        }
      }
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "multicall",
        args: [encoded]
      });
    }));
    __publicField(this, "grant", buildTransactionFunction(async (role, address) => {
      invariant(this.roles.includes(role), `this contract does not support the "${role}" role`);
      const resolvedAddress = await resolveAddress(address);
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "grantRole",
        args: [getRoleHash(role), resolvedAddress]
      });
    }));
    __publicField(this, "revoke", buildTransactionFunction(async (role, address) => {
      invariant(this.roles.includes(role), `this contract does not support the "${role}" role`);
      const resolvedAddress = await resolveAddress(address);
      const revokeFunctionName = await this.getRevokeRoleFunctionName(resolvedAddress);
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: revokeFunctionName,
        args: [getRoleHash(role), resolvedAddress]
      });
    }));
    this.contractWrapper = contractWrapper;
    this.roles = roles;
  }
  async getAll() {
    invariant(this.roles.length, "this contract has no support for roles");
    const roles = {};
    const entries = Object.entries(this.roles);
    (await Promise.all(entries.map((_ref) => {
      let [, role] = _ref;
      return this.get(role);
    }))).forEach((item, index) => roles[entries[index][1]] = item);
    return roles;
  }
  async get(role) {
    invariant(this.roles.includes(role), `this contract does not support the "${role}" role`);
    const wrapper = this.contractWrapper;
    if (hasFunction("getRoleMemberCount", wrapper) && hasFunction("getRoleMember", wrapper)) {
      const roleHash = getRoleHash(role);
      const count = (await wrapper.read("getRoleMemberCount", [roleHash])).toNumber();
      return await Promise.all(Array.from(Array(count).keys()).map((i) => wrapper.read("getRoleMember", [roleHash, i])));
    }
    throw new Error("Contract does not support enumerating roles. Please implement IPermissionsEnumerable to unlock this functionality.");
  }
  async verify(roles, address) {
    await Promise.all(roles.map(async (role) => {
      const [members, resolvedAddress] = await Promise.all([this.get(role), resolveAddress(address)]);
      if (!members.map((a) => a.toLowerCase()).includes(resolvedAddress.toLowerCase())) {
        throw new MissingRoleError(resolvedAddress, role);
      }
    }));
  }
  async getRevokeRoleFunctionName(address) {
    const [resolvedAddress, signerAddress] = await Promise.all([resolveAddress(address), this.contractWrapper.getSignerAddress()]);
    if (signerAddress.toLowerCase() === resolvedAddress.toLowerCase()) {
      return "renounceRole";
    }
    return "revokeRole";
  }
};

export {
  ContractRoles
};
//# sourceMappingURL=chunk-WNMIUQ6V.js.map

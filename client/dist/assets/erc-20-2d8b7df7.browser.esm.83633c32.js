var M=Object.defineProperty;var N=(i,t,r)=>t in i?M(i,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):i[t]=r;var e=(i,t,r)=>(N(i,typeof t!="symbol"?t+"":t,r),r);import{bR as B,b5 as v,ak as p,a6 as s,a7 as l,a4 as E,bS as y,bT as C,bU as w,bV as f,bW as A,b2 as _,B as b,b0 as T,aS as O,as as R,an as z,aJ as F}from"./index.b8b39119.js";import{a as h}from"./assertEnabled-993354c0.browser.esm.18458c2f.js";import{d as u,C as I}from"./contract-appuri-c5be7b04.browser.esm.a5500bdc.js";import{D as V}from"./drop-claim-conditions-8a3ca2fb.browser.esm.6ff0b9c1.js";import{s as U}from"./setErc20Allowance-db4e8402.browser.esm.6b5789eb.js";import{q as D,r as K,s as L}from"./index.532955a9.js";async function k(i,t){const r=await i.read("decimals",[]);return T(O.parse(t),r)}class q{constructor(t,r){e(this,"featureName",w.name);e(this,"tokens",s(async t=>l.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burn",args:[await this.erc20.normalizeAmount(t)]})));e(this,"from",s(async(t,r)=>l.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burnFrom",args:await Promise.all([p(t),this.erc20.normalizeAmount(r)])})));this.erc20=t,this.contractWrapper=r}}class G{constructor(t,r,a){e(this,"featureName",f.name);e(this,"to",s(async(t,r,a)=>{const n=await this.erc20.normalizeAmount(r);return await this.conditions.getClaimTransaction(t,n,a)}));this.erc20=t,this.contractWrapper=r,this.storage=a;const n=new I(this.contractWrapper,F,this.storage);this.conditions=new V(this.contractWrapper,n,this.storage)}}class H{constructor(t,r,a){this.erc20=t,this.contractWrapper=r,this.storage=a,this.claim=new G(this.erc20,this.contractWrapper,this.storage)}}class J{constructor(t,r){e(this,"featureName",C.name);e(this,"to",s(async t=>{const r=new E(this.contractWrapper),n=(await Promise.all(t.map(c=>Promise.all([p(c.toAddress),this.erc20.normalizeAmount(c.amount)])))).map(c=>{let[o,d]=c;return r.encode("mintTo",[o,d])});return l.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[n]})}));this.erc20=t,this.contractWrapper=r}}class j{constructor(t,r){e(this,"featureName",y.name);e(this,"to",s(async(t,r)=>await this.getMintTransaction(t,r)));this.erc20=t,this.contractWrapper=r,this.batch=this.detectErc20BatchMintable()}async getMintTransaction(t,r){return l.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintTo",args:await Promise.all([p(t),this.erc20.normalizeAmount(r)])})}detectErc20BatchMintable(){if(u(this.contractWrapper,"ERC20BatchMintable"))return new J(this.erc20,this.contractWrapper)}}class x{constructor(t,r){e(this,"featureName",A.name);e(this,"mint",s(async t=>{const r=t.payload,a=t.signature,[n,c]=await Promise.all([this.mapPayloadToContractStruct(r),this.contractWrapper.getCallOverrides()]);return await U(this.contractWrapper,b.from(n.price),r.currencyAddress,c),l.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintWithSignature",args:[n,a],overrides:c})}));e(this,"mintBatch",s(async t=>{const r=await Promise.all(t.map(o=>this.mapPayloadToContractStruct(o.payload))),a=t.map((o,d)=>{const W=r[d],m=o.signature,g=o.payload.price;if(b.from(g).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:W,signature:m}}),n=new E(this.contractWrapper),c=a.map(o=>n.encode("mintWithSignature",[o.message,o.signature]));return l.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[c]})}));this.contractWrapper=t,this.roles=r}async verify(t){const r=t.payload,a=t.signature,n=await this.mapPayloadToContractStruct(r);return(await this.contractWrapper.read("verify",[n,a]))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles?.verify(["minter"],await this.contractWrapper.getSignerAddress());const[r,a,n]=await Promise.all([this.contractWrapper.getChainID(),this.contractWrapper.read("name",[]),Promise.all(t.map(m=>D.parseAsync(m)))]),c=this.contractWrapper.getSigner();R(c,"No signer available");const o=await Promise.all(n.map(m=>K.parseAsync(m))),d=await Promise.all(o.map(m=>this.mapPayloadToContractStruct(m))),W=await Promise.all(d.map(m=>this.contractWrapper.signTypedData(c,{name:a,version:"1",chainId:r,verifyingContract:this.contractWrapper.address},{MintRequest:L},m)));return n.map((m,g)=>{const P=o[g],S=W[g];return{payload:P,signature:S.toString()}})}async mapPayloadToContractStruct(t){const[r,a]=await Promise.all([z(this.contractWrapper.getProvider(),t.price,t.currencyAddress),this.contractWrapper.read("decimals",[])]),n=T(t.quantity,a);return{to:t.to,primarySaleRecipient:t.primarySaleRecipient,quantity:n,price:r,currency:t.currencyAddress,validityEndTimestamp:t.mintEndTime,validityStartTimestamp:t.mintStartTime,uid:t.uid}}}class at{constructor(t,r,a){e(this,"featureName",B.name);e(this,"transfer",s(async(t,r)=>l.fromContractWrapper({contractWrapper:this.contractWrapper,method:"transfer",args:await Promise.all([p(t),this.normalizeAmount(r)])})));e(this,"transferFrom",s(async(t,r,a)=>l.fromContractWrapper({contractWrapper:this.contractWrapper,method:"transferFrom",args:await Promise.all([p(t),p(r),this.normalizeAmount(a)])})));e(this,"setAllowance",s(async(t,r)=>l.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approve",args:await Promise.all([p(t),this.normalizeAmount(r)])})));e(this,"transferBatch",s(async t=>{const r=new E(this.contractWrapper),a=(await Promise.all(t.map(n=>Promise.all([this.normalizeAmount(n.amount),p(n.toAddress)])))).map(n=>{let[c,o]=n;return r.encode("transfer",[o,c])});return l.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[a]})}));e(this,"mint",s(async t=>this.mintTo.prepare(await this.contractWrapper.getSignerAddress(),t)));e(this,"mintTo",s(async(t,r)=>h(this.mintable,y).to.prepare(t,r)));e(this,"mintBatchTo",s(async t=>h(this.mintable?.batch,C).to.prepare(t)));e(this,"burn",s(async t=>h(this.burnable,w).tokens.prepare(t)));e(this,"burnFrom",s(async(t,r)=>h(this.burnable,w).from.prepare(t,r)));e(this,"claim",s(async(t,r)=>this.claimTo.prepare(await this.contractWrapper.getSignerAddress(),t,r)));e(this,"claimTo",s(async(t,r,a)=>h(this.droppable?.claim,f).to.prepare(t,r,a)));this.contractWrapper=t,this.storage=r,this.mintable=this.detectErc20Mintable(),this.burnable=this.detectErc20Burnable(),this.droppable=this.detectErc20Droppable(),this.signatureMintable=this.detectErc20SignatureMintable(),this._chainId=a}get chainId(){return this._chainId}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async get(){return await v(this.contractWrapper.getProvider(),this.getAddress())}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async balanceOf(t){return this.getValue(await this.contractWrapper.read("balanceOf",[await p(t)]))}async totalSupply(){return await this.getValue(await this.contractWrapper.read("totalSupply",[]))}async allowance(t){const[r,a]=await Promise.all([this.contractWrapper.getSignerAddress(),p(t)]);return await this.allowanceOf(r,a)}async allowanceOf(t,r){const a=await Promise.all([p(t),p(r)]);return await this.getValue(await this.contractWrapper.read("allowance",a))}async getMintTransaction(t,r){return h(this.mintable,y).getMintTransaction(t,r)}get claimConditions(){return h(this.droppable?.claim,f).conditions}get signature(){return h(this.signatureMintable,A)}async normalizeAmount(t){return k(this.contractWrapper,t)}async getValue(t){return await _(this.contractWrapper.getProvider(),this.getAddress(),b.from(t))}detectErc20Mintable(){if(u(this.contractWrapper,"ERC20"))return new j(this,this.contractWrapper)}detectErc20Burnable(){if(u(this.contractWrapper,"ERC20Burnable"))return new q(this,this.contractWrapper)}detectErc20Droppable(){if(u(this.contractWrapper,"ERC20ClaimConditionsV1")||u(this.contractWrapper,"ERC20ClaimConditionsV2")||u(this.contractWrapper,"ERC20ClaimPhasesV1")||u(this.contractWrapper,"ERC20ClaimPhasesV2"))return new H(this,this.contractWrapper,this.storage)}detectErc20SignatureMintable(){if(u(this.contractWrapper,"ERC20SignatureMintable"))return new x(this.contractWrapper)}}export{at as E,x as a};

import { providers, Contract, utils } from 'ethers';
import { s as setAnalyticsHeaders } from './headers-343e228e.browser.esm.js';
import { i as isTwUrl } from './url-a45219bd.browser.esm.js';
import { chainIdToThirdwebRpc } from '../evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';

const EIP1271_ABI = ["function isValidSignature(bytes32 _hash, bytes _signature) public view returns (bytes4)"];
const EIP1271_MAGICVALUE = "0x1626ba7e";
async function checkContractWalletSignature(message, signature, address, chainId, clientId, secretKey) {
  // TODO: remove below `skipFetchSetup` logic when ethers.js v6 support arrives
  let _skipFetchSetup = false;
  if (typeof globalThis !== "undefined" && "TW_SKIP_FETCH_SETUP" in globalThis && typeof globalThis.TW_SKIP_FETCH_SETUP === "boolean") {
    _skipFetchSetup = globalThis.TW_SKIP_FETCH_SETUP;
  }
  const rpcUrl = chainIdToThirdwebRpc(chainId, clientId);
  const headers = {};
  if (isTwUrl(rpcUrl)) {
    const bundleId = typeof globalThis !== "undefined" && "APP_BUNDLE_ID" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;
    if (secretKey) {
      headers["x-secret-key"] = secretKey;
    } else if (clientId) {
      headers["x-client-id"] = clientId;
      if (bundleId) {
        headers["x-bundle-id"] = bundleId;
      }
    }

    // Dashboard token
    if (typeof globalThis !== "undefined" && "TW_AUTH_TOKEN" in globalThis && typeof globalThis.TW_AUTH_TOKEN === "string") {
      headers["authorization"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;
    }

    // CLI token
    if (typeof globalThis !== "undefined" && "TW_CLI_AUTH_TOKEN" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === "string") {
      headers["authorization"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;
      headers["x-authorize-wallet"] = "true";
    }
    setAnalyticsHeaders(headers);
  }
  const provider = new providers.StaticJsonRpcProvider({
    url: rpcUrl,
    skipFetchSetup: _skipFetchSetup,
    headers
  }, chainId);
  const walletContract = new Contract(address, EIP1271_ABI, provider);
  try {
    const res = await walletContract.isValidSignature(utils.hashMessage(message), signature);
    return res === EIP1271_MAGICVALUE;
  } catch {
    return false;
  }
}

const ENTRYPOINT_ADDRESS = "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"; // v0.6
const ERC6551_REGISTRY = "0x02101dfB77FDE026414827Fdc604ddAF224F0921";
const MANAGED_ACCOUNT_GAS_BUFFER = 50000;
const ACCOUNT_CORE_ABI = [{
  type: "constructor",
  inputs: [{
    name: "_entrypoint",
    type: "address",
    internalType: "contract IEntryPoint"
  }, {
    name: "_factory",
    type: "address",
    internalType: "address"
  }],
  stateMutability: "nonpayable"
}, {
  type: "receive",
  stateMutability: "payable"
}, {
  type: "function",
  name: "addDeposit",
  inputs: [],
  outputs: [],
  stateMutability: "payable"
}, {
  type: "function",
  name: "contractURI",
  inputs: [],
  outputs: [{
    name: "",
    type: "string",
    internalType: "string"
  }],
  stateMutability: "view"
}, {
  type: "function",
  name: "entryPoint",
  inputs: [],
  outputs: [{
    name: "",
    type: "address",
    internalType: "contract IEntryPoint"
  }],
  stateMutability: "view"
}, {
  type: "function",
  name: "execute",
  inputs: [{
    name: "_target",
    type: "address",
    internalType: "address"
  }, {
    name: "_value",
    type: "uint256",
    internalType: "uint256"
  }, {
    name: "_calldata",
    type: "bytes",
    internalType: "bytes"
  }],
  outputs: [],
  stateMutability: "nonpayable"
}, {
  type: "function",
  name: "executeBatch",
  inputs: [{
    name: "_target",
    type: "address[]",
    internalType: "address[]"
  }, {
    name: "_value",
    type: "uint256[]",
    internalType: "uint256[]"
  }, {
    name: "_calldata",
    type: "bytes[]",
    internalType: "bytes[]"
  }],
  outputs: [],
  stateMutability: "nonpayable"
}, {
  type: "function",
  name: "factory",
  inputs: [],
  outputs: [{
    name: "",
    type: "address",
    internalType: "address"
  }],
  stateMutability: "view"
}, {
  type: "function",
  name: "getAllActiveSigners",
  inputs: [],
  outputs: [{
    name: "signers",
    type: "tuple[]",
    internalType: "struct IAccountPermissions.SignerPermissions[]",
    components: [{
      name: "signer",
      type: "address",
      internalType: "address"
    }, {
      name: "approvedTargets",
      type: "address[]",
      internalType: "address[]"
    }, {
      name: "nativeTokenLimitPerTransaction",
      type: "uint256",
      internalType: "uint256"
    }, {
      name: "startTimestamp",
      type: "uint128",
      internalType: "uint128"
    }, {
      name: "endTimestamp",
      type: "uint128",
      internalType: "uint128"
    }]
  }],
  stateMutability: "view"
}, {
  type: "function",
  name: "getAllAdmins",
  inputs: [],
  outputs: [{
    name: "",
    type: "address[]",
    internalType: "address[]"
  }],
  stateMutability: "view"
}, {
  type: "function",
  name: "getAllSigners",
  inputs: [],
  outputs: [{
    name: "signers",
    type: "tuple[]",
    internalType: "struct IAccountPermissions.SignerPermissions[]",
    components: [{
      name: "signer",
      type: "address",
      internalType: "address"
    }, {
      name: "approvedTargets",
      type: "address[]",
      internalType: "address[]"
    }, {
      name: "nativeTokenLimitPerTransaction",
      type: "uint256",
      internalType: "uint256"
    }, {
      name: "startTimestamp",
      type: "uint128",
      internalType: "uint128"
    }, {
      name: "endTimestamp",
      type: "uint128",
      internalType: "uint128"
    }]
  }],
  stateMutability: "view"
}, {
  type: "function",
  name: "getMessageHash",
  inputs: [{
    name: "_hash",
    type: "bytes32",
    internalType: "bytes32"
  }],
  outputs: [{
    name: "",
    type: "bytes32",
    internalType: "bytes32"
  }],
  stateMutability: "view"
}, {
  type: "function",
  name: "getNonce",
  inputs: [],
  outputs: [{
    name: "",
    type: "uint256",
    internalType: "uint256"
  }],
  stateMutability: "view"
}, {
  type: "function",
  name: "getPermissionsForSigner",
  inputs: [{
    name: "signer",
    type: "address",
    internalType: "address"
  }],
  outputs: [{
    name: "",
    type: "tuple",
    internalType: "struct IAccountPermissions.SignerPermissions",
    components: [{
      name: "signer",
      type: "address",
      internalType: "address"
    }, {
      name: "approvedTargets",
      type: "address[]",
      internalType: "address[]"
    }, {
      name: "nativeTokenLimitPerTransaction",
      type: "uint256",
      internalType: "uint256"
    }, {
      name: "startTimestamp",
      type: "uint128",
      internalType: "uint128"
    }, {
      name: "endTimestamp",
      type: "uint128",
      internalType: "uint128"
    }]
  }],
  stateMutability: "view"
}, {
  type: "function",
  name: "initialize",
  inputs: [{
    name: "_defaultAdmin",
    type: "address",
    internalType: "address"
  }, {
    name: "_data",
    type: "bytes",
    internalType: "bytes"
  }],
  outputs: [],
  stateMutability: "nonpayable"
}, {
  type: "function",
  name: "isActiveSigner",
  inputs: [{
    name: "signer",
    type: "address",
    internalType: "address"
  }],
  outputs: [{
    name: "",
    type: "bool",
    internalType: "bool"
  }],
  stateMutability: "view"
}, {
  type: "function",
  name: "isAdmin",
  inputs: [{
    name: "_account",
    type: "address",
    internalType: "address"
  }],
  outputs: [{
    name: "",
    type: "bool",
    internalType: "bool"
  }],
  stateMutability: "view"
}, {
  type: "function",
  name: "isValidSignature",
  inputs: [{
    name: "_hash",
    type: "bytes32",
    internalType: "bytes32"
  }, {
    name: "_signature",
    type: "bytes",
    internalType: "bytes"
  }],
  outputs: [{
    name: "magicValue",
    type: "bytes4",
    internalType: "bytes4"
  }],
  stateMutability: "view"
}, {
  type: "function",
  name: "isValidSigner",
  inputs: [{
    name: "_signer",
    type: "address",
    internalType: "address"
  }, {
    name: "_userOp",
    type: "tuple",
    internalType: "struct UserOperation",
    components: [{
      name: "sender",
      type: "address",
      internalType: "address"
    }, {
      name: "nonce",
      type: "uint256",
      internalType: "uint256"
    }, {
      name: "initCode",
      type: "bytes",
      internalType: "bytes"
    }, {
      name: "callData",
      type: "bytes",
      internalType: "bytes"
    }, {
      name: "callGasLimit",
      type: "uint256",
      internalType: "uint256"
    }, {
      name: "verificationGasLimit",
      type: "uint256",
      internalType: "uint256"
    }, {
      name: "preVerificationGas",
      type: "uint256",
      internalType: "uint256"
    }, {
      name: "maxFeePerGas",
      type: "uint256",
      internalType: "uint256"
    }, {
      name: "maxPriorityFeePerGas",
      type: "uint256",
      internalType: "uint256"
    }, {
      name: "paymasterAndData",
      type: "bytes",
      internalType: "bytes"
    }, {
      name: "signature",
      type: "bytes",
      internalType: "bytes"
    }]
  }],
  outputs: [{
    name: "",
    type: "bool",
    internalType: "bool"
  }],
  stateMutability: "view"
}, {
  type: "function",
  name: "multicall",
  inputs: [{
    name: "data",
    type: "bytes[]",
    internalType: "bytes[]"
  }],
  outputs: [{
    name: "results",
    type: "bytes[]",
    internalType: "bytes[]"
  }],
  stateMutability: "nonpayable"
}, {
  type: "function",
  name: "onERC1155BatchReceived",
  inputs: [{
    name: "",
    type: "address",
    internalType: "address"
  }, {
    name: "",
    type: "address",
    internalType: "address"
  }, {
    name: "",
    type: "uint256[]",
    internalType: "uint256[]"
  }, {
    name: "",
    type: "uint256[]",
    internalType: "uint256[]"
  }, {
    name: "",
    type: "bytes",
    internalType: "bytes"
  }],
  outputs: [{
    name: "",
    type: "bytes4",
    internalType: "bytes4"
  }],
  stateMutability: "nonpayable"
}, {
  type: "function",
  name: "onERC1155Received",
  inputs: [{
    name: "",
    type: "address",
    internalType: "address"
  }, {
    name: "",
    type: "address",
    internalType: "address"
  }, {
    name: "",
    type: "uint256",
    internalType: "uint256"
  }, {
    name: "",
    type: "uint256",
    internalType: "uint256"
  }, {
    name: "",
    type: "bytes",
    internalType: "bytes"
  }],
  outputs: [{
    name: "",
    type: "bytes4",
    internalType: "bytes4"
  }],
  stateMutability: "nonpayable"
}, {
  type: "function",
  name: "onERC721Received",
  inputs: [{
    name: "",
    type: "address",
    internalType: "address"
  }, {
    name: "",
    type: "address",
    internalType: "address"
  }, {
    name: "",
    type: "uint256",
    internalType: "uint256"
  }, {
    name: "",
    type: "bytes",
    internalType: "bytes"
  }],
  outputs: [{
    name: "",
    type: "bytes4",
    internalType: "bytes4"
  }],
  stateMutability: "nonpayable"
}, {
  type: "function",
  name: "setContractURI",
  inputs: [{
    name: "_uri",
    type: "string",
    internalType: "string"
  }],
  outputs: [],
  stateMutability: "nonpayable"
}, {
  type: "function",
  name: "setEntrypointOverride",
  inputs: [{
    name: "_entrypointOverride",
    type: "address",
    internalType: "contract IEntryPoint"
  }],
  outputs: [],
  stateMutability: "nonpayable"
}, {
  type: "function",
  name: "setPermissionsForSigner",
  inputs: [{
    name: "_req",
    type: "tuple",
    internalType: "struct IAccountPermissions.SignerPermissionRequest",
    components: [{
      name: "signer",
      type: "address",
      internalType: "address"
    }, {
      name: "isAdmin",
      type: "uint8",
      internalType: "uint8"
    }, {
      name: "approvedTargets",
      type: "address[]",
      internalType: "address[]"
    }, {
      name: "nativeTokenLimitPerTransaction",
      type: "uint256",
      internalType: "uint256"
    }, {
      name: "permissionStartTimestamp",
      type: "uint128",
      internalType: "uint128"
    }, {
      name: "permissionEndTimestamp",
      type: "uint128",
      internalType: "uint128"
    }, {
      name: "reqValidityStartTimestamp",
      type: "uint128",
      internalType: "uint128"
    }, {
      name: "reqValidityEndTimestamp",
      type: "uint128",
      internalType: "uint128"
    }, {
      name: "uid",
      type: "bytes32",
      internalType: "bytes32"
    }]
  }, {
    name: "_signature",
    type: "bytes",
    internalType: "bytes"
  }],
  outputs: [],
  stateMutability: "nonpayable"
}, {
  type: "function",
  name: "supportsInterface",
  inputs: [{
    name: "interfaceId",
    type: "bytes4",
    internalType: "bytes4"
  }],
  outputs: [{
    name: "",
    type: "bool",
    internalType: "bool"
  }],
  stateMutability: "view"
}, {
  type: "function",
  name: "validateUserOp",
  inputs: [{
    name: "userOp",
    type: "tuple",
    internalType: "struct UserOperation",
    components: [{
      name: "sender",
      type: "address",
      internalType: "address"
    }, {
      name: "nonce",
      type: "uint256",
      internalType: "uint256"
    }, {
      name: "initCode",
      type: "bytes",
      internalType: "bytes"
    }, {
      name: "callData",
      type: "bytes",
      internalType: "bytes"
    }, {
      name: "callGasLimit",
      type: "uint256",
      internalType: "uint256"
    }, {
      name: "verificationGasLimit",
      type: "uint256",
      internalType: "uint256"
    }, {
      name: "preVerificationGas",
      type: "uint256",
      internalType: "uint256"
    }, {
      name: "maxFeePerGas",
      type: "uint256",
      internalType: "uint256"
    }, {
      name: "maxPriorityFeePerGas",
      type: "uint256",
      internalType: "uint256"
    }, {
      name: "paymasterAndData",
      type: "bytes",
      internalType: "bytes"
    }, {
      name: "signature",
      type: "bytes",
      internalType: "bytes"
    }]
  }, {
    name: "userOpHash",
    type: "bytes32",
    internalType: "bytes32"
  }, {
    name: "missingAccountFunds",
    type: "uint256",
    internalType: "uint256"
  }],
  outputs: [{
    name: "validationData",
    type: "uint256",
    internalType: "uint256"
  }],
  stateMutability: "nonpayable"
}, {
  type: "function",
  name: "verifySignerPermissionRequest",
  inputs: [{
    name: "req",
    type: "tuple",
    internalType: "struct IAccountPermissions.SignerPermissionRequest",
    components: [{
      name: "signer",
      type: "address",
      internalType: "address"
    }, {
      name: "isAdmin",
      type: "uint8",
      internalType: "uint8"
    }, {
      name: "approvedTargets",
      type: "address[]",
      internalType: "address[]"
    }, {
      name: "nativeTokenLimitPerTransaction",
      type: "uint256",
      internalType: "uint256"
    }, {
      name: "permissionStartTimestamp",
      type: "uint128",
      internalType: "uint128"
    }, {
      name: "permissionEndTimestamp",
      type: "uint128",
      internalType: "uint128"
    }, {
      name: "reqValidityStartTimestamp",
      type: "uint128",
      internalType: "uint128"
    }, {
      name: "reqValidityEndTimestamp",
      type: "uint128",
      internalType: "uint128"
    }, {
      name: "uid",
      type: "bytes32",
      internalType: "bytes32"
    }]
  }, {
    name: "signature",
    type: "bytes",
    internalType: "bytes"
  }],
  outputs: [{
    name: "success",
    type: "bool",
    internalType: "bool"
  }, {
    name: "signer",
    type: "address",
    internalType: "address"
  }],
  stateMutability: "view"
}, {
  type: "function",
  name: "withdrawDepositTo",
  inputs: [{
    name: "withdrawAddress",
    type: "address",
    internalType: "address payable"
  }, {
    name: "amount",
    type: "uint256",
    internalType: "uint256"
  }],
  outputs: [],
  stateMutability: "nonpayable"
}, {
  type: "event",
  name: "AdminUpdated",
  inputs: [{
    name: "signer",
    type: "address",
    indexed: true,
    internalType: "address"
  }, {
    name: "isAdmin",
    type: "bool",
    indexed: false,
    internalType: "bool"
  }],
  anonymous: false
}, {
  type: "event",
  name: "ContractURIUpdated",
  inputs: [{
    name: "prevURI",
    type: "string",
    indexed: false,
    internalType: "string"
  }, {
    name: "newURI",
    type: "string",
    indexed: false,
    internalType: "string"
  }],
  anonymous: false
}, {
  type: "event",
  name: "Initialized",
  inputs: [{
    name: "version",
    type: "uint8",
    indexed: false,
    internalType: "uint8"
  }],
  anonymous: false
}, {
  type: "event",
  name: "SignerPermissionsUpdated",
  inputs: [{
    name: "authorizingSigner",
    type: "address",
    indexed: true,
    internalType: "address"
  }, {
    name: "targetSigner",
    type: "address",
    indexed: true,
    internalType: "address"
  }, {
    name: "permissions",
    type: "tuple",
    indexed: false,
    internalType: "struct IAccountPermissions.SignerPermissionRequest",
    components: [{
      name: "signer",
      type: "address",
      internalType: "address"
    }, {
      name: "isAdmin",
      type: "uint8",
      internalType: "uint8"
    }, {
      name: "approvedTargets",
      type: "address[]",
      internalType: "address[]"
    }, {
      name: "nativeTokenLimitPerTransaction",
      type: "uint256",
      internalType: "uint256"
    }, {
      name: "permissionStartTimestamp",
      type: "uint128",
      internalType: "uint128"
    }, {
      name: "permissionEndTimestamp",
      type: "uint128",
      internalType: "uint128"
    }, {
      name: "reqValidityStartTimestamp",
      type: "uint128",
      internalType: "uint128"
    }, {
      name: "reqValidityEndTimestamp",
      type: "uint128",
      internalType: "uint128"
    }, {
      name: "uid",
      type: "bytes32",
      internalType: "bytes32"
    }]
  }],
  anonymous: false
}];

export { ACCOUNT_CORE_ABI as A, ENTRYPOINT_ADDRESS as E, MANAGED_ACCOUNT_GAS_BUFFER as M, ERC6551_REGISTRY as a, checkContractWalletSignature as c };

import{x as h,J as d,R as u,U as a,k as p,V as l,c_ as m}from"./index.b8b39119.js";import{InjectedConnector as w}from"./thirdweb-dev-wallets-evm-connectors-injected.browser.esm.749e26da.js";class C extends w{constructor(e){const n={...{name:"OneKey Wallet",shimDisconnect:!0,shimChainChangedDisconnect:!0,getProvider:m},...e.options};super({chains:e.chains,options:n,connectorStorage:e.connectorStorage}),h(this,"id",d.oneKey)}async connect(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};try{const t=await this.getProvider();if(!t)throw new u;this.setupListeners(),this.emit("message",{type:"connecting"});let n=null;if(this.options?.shimDisconnect&&!Boolean(this.connectorStorage.getItem(this.shimDisconnectKey))&&(n=await this.getAccount().catch(()=>null),!!n))try{await t.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}catch(c){if(this.isUserRejectedRequestError(c))throw new a(c)}if(!n){const o=await t.request({method:"eth_requestAccounts"});n=p(o[0])}let s=await this.getChainId(),i=this.isChainUnsupported(s);if(e.chainId&&s!==e.chainId)try{await this.switchChain(e.chainId),s=e.chainId,i=this.isChainUnsupported(e.chainId)}catch(o){console.error(`Could not switch to chain id : ${e.chainId}`,o)}this.options?.shimDisconnect&&await this.connectorStorage.setItem(this.shimDisconnectKey,"true");const r={chain:{id:s,unsupported:i},provider:t,account:n};return this.emit("connect",r),r}catch(t){throw this.isUserRejectedRequestError(t)?new a(t):t.code===-32002?new l(t):t}}}export{C as OneKeyConnector};

import {
  fetchCurrencyMetadata,
  isNativeToken
} from "./chunk-LXY7U6R5.js";
import {
  AmountSchema,
  BigNumberTransformSchema$1,
  ContractWrapper,
  FileOrBufferOrStringSchema,
  HexColor,
  z
} from "./chunk-CFECTRPO.js";
import {
  init_lib7 as init_lib,
  utils_exports
} from "./chunk-P6GEGE7G.js";
import {
  init_shim
} from "./chunk-6E35MBRA.js";

// node_modules/@thirdweb-dev/sdk/dist/setErc20Allowance-db4e8402.browser.esm.js
init_shim();
var PropertiesInput = (() => z.object({}).catchall(z.union([BigNumberTransformSchema$1, z.unknown()])))();
var OptionalPropertiesInput = (() => z.union([z.array(z.array(PropertiesInput)).transform((i) => i.flat()), z.array(PropertiesInput), PropertiesInput]).optional().nullable())();
var BasicNFTInput = (() => z.object({
  name: z.union([z.string(), z.number()]).optional().nullable(),
  description: z.string().nullable().optional().nullable(),
  image: FileOrBufferOrStringSchema.nullable().optional(),
  animation_url: FileOrBufferOrStringSchema.optional().nullable()
}))();
var CommonNFTInput = (() => BasicNFTInput.extend({
  external_url: FileOrBufferOrStringSchema.nullable().optional(),
  background_color: HexColor.optional().nullable(),
  properties: OptionalPropertiesInput,
  attributes: OptionalPropertiesInput
}).catchall(z.union([BigNumberTransformSchema$1, z.unknown()])))();
var NFTInputOrUriSchema = (() => z.union([CommonNFTInput, z.string()]))();
var CommonNFTOutput = (() => CommonNFTInput.extend({
  id: z.string(),
  uri: z.string(),
  image: z.string().nullable().optional(),
  external_url: z.string().nullable().optional(),
  animation_url: z.string().nullable().optional()
}))();
async function setErc20Allowance(contractToApprove, value, currencyAddress, overrides) {
  if (isNativeToken(currencyAddress)) {
    overrides["value"] = value;
  } else {
    const ERC20Abi = (await import("./IERC20-GHSR35K6.js")).default;
    const signer = contractToApprove.getSigner();
    const provider = contractToApprove.getProvider();
    const erc20 = new ContractWrapper(signer || provider, currencyAddress, ERC20Abi, contractToApprove.options, contractToApprove.storage);
    const owner = await contractToApprove.getSignerAddress();
    const spender = contractToApprove.address;
    const allowance = await erc20.read("allowance", [owner, spender]);
    if (allowance.lt(value)) {
      await erc20.sendTransaction("approve", [spender, value]);
    }
    return overrides;
  }
}

// node_modules/@thirdweb-dev/sdk/dist/normalizePriceValue-8ce073fb.browser.esm.js
init_shim();
init_lib();
async function normalizePriceValue(provider, inputPrice, currencyAddress) {
  const metadata = await fetchCurrencyMetadata(provider, currencyAddress);
  return utils_exports.parseUnits(AmountSchema.parse(inputPrice), metadata.decimals);
}

export {
  BasicNFTInput,
  CommonNFTInput,
  NFTInputOrUriSchema,
  CommonNFTOutput,
  setErc20Allowance,
  normalizePriceValue
};
//# sourceMappingURL=chunk-SRYWWROE.js.map

import {
  detectOS,
  detectPlatform
} from "./chunk-QF4FY6WN.js";
import {
  init_shim
} from "./chunk-6E35MBRA.js";

// node_modules/@thirdweb-dev/sdk/node_modules/thirdweb/dist/esm/utils/domains.js
init_shim();
var DEFAULT_RPC_URL = "rpc.thirdweb.com";
var DEFAULT_IN_APP_WALLET_URL = "embedded-wallet.thirdweb.com";
var DEFAULT_PAY_URL = "pay.thirdweb.com";
var DEFAULT_STORAGE_URL = "storage.thirdweb.com";
var DEFAULT_BUNDLER_URL = "bundler.thirdweb.com";
var domains = {
  rpc: DEFAULT_RPC_URL,
  inAppWallet: DEFAULT_IN_APP_WALLET_URL,
  pay: DEFAULT_PAY_URL,
  storage: DEFAULT_STORAGE_URL,
  bundler: DEFAULT_BUNDLER_URL
};
var getThirdwebDomains = () => {
  return domains;
};

// node_modules/@thirdweb-dev/sdk/node_modules/thirdweb/dist/esm/utils/fetch.js
init_shim();

// node_modules/@thirdweb-dev/sdk/node_modules/thirdweb/dist/esm/version.js
init_shim();
var version = "5.23.0";

// node_modules/@thirdweb-dev/sdk/node_modules/thirdweb/dist/esm/utils/caching/lru.js
init_shim();
var LruMap = class extends Map {
  constructor(size) {
    super();
    Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxSize = size;
  }
  set(key, value) {
    super.set(key, value);
    if (this.maxSize && this.size > this.maxSize) {
      this.delete(this.keys().next().value);
    }
    return this;
  }
};

// node_modules/@thirdweb-dev/sdk/node_modules/thirdweb/dist/esm/utils/fetch.js
var DEFAULT_REQUEST_TIMEOUT = 6e4;
var FETCH_CACHE = /* @__PURE__ */ new WeakMap();
function getClientFetch(client) {
  if (FETCH_CACHE.has(client)) {
    return FETCH_CACHE.get(client);
  }
  async function fetchWithHeaders(url, init) {
    const { requestTimeoutMs = DEFAULT_REQUEST_TIMEOUT, ...restInit } = init || {};
    let headers = restInit.headers ? new Headers(restInit.headers) : void 0;
    if (isThirdwebUrl(url)) {
      if (!headers) {
        headers = new Headers();
      }
      const authToken = getTWAuthToken();
      if (authToken) {
        headers.set("authorization", `Bearer ${authToken}`);
      } else if (client.secretKey) {
        headers.set("x-secret-key", client.secretKey);
      } else if (client.clientId) {
        headers.set("x-client-id", client.clientId);
      }
      for (const [key, value] of getPlatformHeaders()) {
        headers.set(key, value);
      }
    }
    let controller;
    let abortTimeout;
    if (requestTimeoutMs) {
      controller = new AbortController();
      abortTimeout = setTimeout(() => {
        controller?.abort();
      }, requestTimeoutMs);
    }
    return fetch(url, {
      ...restInit,
      headers,
      signal: controller?.signal
    }).finally(() => {
      if (abortTimeout) {
        clearTimeout(abortTimeout);
      }
    });
  }
  FETCH_CACHE.set(client, fetchWithHeaders);
  return fetchWithHeaders;
}
var THIRDWEB_DOMAINS = [
  ".thirdweb.com",
  ".ipfscdn.io",
  ".thirdweb.dev",
  ".thirdweb-dev.com"
];
var IS_THIRDWEB_URL_CACHE = new LruMap(4096);
function isThirdwebUrl(url) {
  if (IS_THIRDWEB_URL_CACHE.has(url)) {
    return IS_THIRDWEB_URL_CACHE.get(url);
  }
  try {
    const { hostname } = new URL(url);
    const is = THIRDWEB_DOMAINS.some((domain) => hostname.endsWith(domain)) || hostname === "localhost";
    IS_THIRDWEB_URL_CACHE.set(url, is);
    return is;
  } catch {
    IS_THIRDWEB_URL_CACHE.set(url, false);
    return false;
  }
}
var SDK_NAME = "unified-sdk";
var previousPlatform;
function getPlatformHeaders() {
  if (previousPlatform) {
    return previousPlatform;
  }
  let os = null;
  if (typeof navigator !== "undefined") {
    os = detectOS(navigator.userAgent);
  }
  let bundleId = void 0;
  if (typeof globalThis !== "undefined" && "Application" in globalThis) {
    bundleId = globalThis.Application.applicationId;
  }
  previousPlatform = Object.entries({
    "x-sdk-platform": detectPlatform(),
    "x-sdk-version": version,
    "x-sdk-os": os ? parseOs(os) : "unknown",
    "x-sdk-name": SDK_NAME,
    ...bundleId ? { "x-bundle-id": bundleId } : {}
  });
  return previousPlatform;
}
function parseOs(os) {
  const osLowerCased = os.toLowerCase();
  if (osLowerCased.startsWith("win")) {
    return "win";
  }
  switch (os) {
    case "Mac OS":
      return "mac";
    case "iOS":
      return "ios";
    case "Android OS":
      return "android";
    default:
      return osLowerCased.replace(/\s/gi, "_");
  }
}
function getTWAuthToken() {
  if (typeof globalThis !== "undefined" && "TW_AUTH_TOKEN" in globalThis && typeof globalThis.TW_AUTH_TOKEN === "string") {
    return globalThis.TW_AUTH_TOKEN;
  }
  return null;
}

export {
  LruMap,
  DEFAULT_RPC_URL,
  getThirdwebDomains,
  getClientFetch,
  isThirdwebUrl
};
//# sourceMappingURL=chunk-7C2JITWE.js.map

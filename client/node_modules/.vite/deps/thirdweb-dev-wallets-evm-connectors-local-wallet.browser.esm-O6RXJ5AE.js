import {
  Connector
} from "./chunk-U573SYRD.js";
import {
  normalizeChainId
} from "./chunk-5DOGRJYJ.js";
import {
  _defineProperty
} from "./chunk-7KVJTDF4.js";
import "./chunk-ES4ESUXH.js";
import "./chunk-EDYLTFNM.js";
import "./chunk-XUBMYDWF.js";
import "./chunk-E5UTDT4L.js";
import "./chunk-UBMHJBTN.js";
import "./chunk-QUBYRQD3.js";
import "./chunk-ZNDGUQSQ.js";
import "./chunk-OCRF6ZYJ.js";
import "./chunk-HZ45LFNY.js";
import "./chunk-WG3IFTZB.js";
import "./chunk-AQTV3AJL.js";
import "./chunk-7C2JITWE.js";
import "./chunk-XMVENQD3.js";
import "./chunk-QF4FY6WN.js";
import "./chunk-HMZMTDNX.js";
import "./chunk-EQTMJVFD.js";
import "./chunk-QBEUODG3.js";
import "./chunk-DOKT7LHU.js";
import "./chunk-DBKZNLMF.js";
import "./chunk-CYODSTUI.js";
import "./chunk-RT5IK3ZX.js";
import "./chunk-TWGI2UAL.js";
import "./chunk-ZWW5UF53.js";
import "./chunk-7MSJPQ6D.js";
import "./chunk-MRCQTN4N.js";
import "./chunk-2GM7IOYX.js";
import "./chunk-7Y72NYVJ.js";
import "./chunk-3OSQYQKA.js";
import "./chunk-VFO2MZYD.js";
import "./chunk-JKXMTC5W.js";
import "./chunk-LJDKFPD5.js";
import "./chunk-IJEJ7ZKK.js";
import "./chunk-YZUC2CAF.js";
import "./chunk-TSZJGRCN.js";
import "./chunk-OYFG36NZ.js";
import "./chunk-ULJVIQFI.js";
import "./chunk-INCOK333.js";
import "./chunk-5TGBXTHW.js";
import "./chunk-CUPWV6DQ.js";
import "./chunk-JFA442KI.js";
import "./chunk-POEPSFOQ.js";
import "./chunk-SRYWWROE.js";
import "./chunk-WNMIUQ6V.js";
import "./chunk-LXY7U6R5.js";
import {
  getChainProvider,
  getDefaultGasOverrides
} from "./chunk-CFECTRPO.js";
import {
  require_utils
} from "./chunk-LM37R6ZK.js";
import "./chunk-I3A4RD7G.js";
import "./chunk-JP4SQOMD.js";
import "./chunk-RDJCVU2P.js";
import "./chunk-GJMET5ED.js";
import "./chunk-S7TFJEVG.js";
import "./chunk-RLHLCECS.js";
import "./chunk-5GFA5ZH5.js";
import "./chunk-EGWPWJMJ.js";
import "./chunk-QWFIJIBR.js";
import "./chunk-JBLG36RJ.js";
import "./chunk-RRKG2OFG.js";
import "./chunk-6XWYBKHF.js";
import {
  init_lib7 as init_lib
} from "./chunk-P6GEGE7G.js";
import {
  Signer
} from "./chunk-77SMNJM3.js";
import "./chunk-OPAF3CF6.js";
import "./chunk-H3V7PHW7.js";
import {
  init_shim
} from "./chunk-6E35MBRA.js";
import {
  __toESM
} from "./chunk-IJ7IQSKN.js";

// node_modules/@thirdweb-dev/wallets/evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm.js
init_shim();
init_lib();
var import_utils = __toESM(require_utils());
var WrappedSigner = class extends Signer {
  constructor(signer) {
    super();
    this.signer = signer;
    (0, import_utils.defineReadOnly)(this, "provider", signer.provider);
  }
  async getAddress() {
    return await this.signer.getAddress();
  }
  async signMessage(message) {
    return await this.signer.signMessage(message);
  }
  async signTransaction(transaction) {
    return await this.signer.signTransaction(transaction);
  }
  connect(provider) {
    return new WrappedSigner(this.signer.connect(provider));
  }
  _signTypedData(domain, types, value) {
    return this.signer._signTypedData(domain, types, value);
  }
  async sendTransaction(transaction) {
    if (!this.provider) {
      throw new Error("Provider not found");
    }
    const gas = await getDefaultGasOverrides(this.provider);
    const txWithGas = {
      ...gas,
      ...transaction
    };
    return await this.signer.sendTransaction(txWithGas);
  }
};
var LocalWalletConnector = class extends Connector {
  constructor(options) {
    super();
    _defineProperty(this, "id", "local_wallet");
    _defineProperty(this, "name", "Local Wallet");
    _defineProperty(this, "shimDisconnectKey", "localWallet.shimDisconnect");
    _defineProperty(this, "onChainChanged", (chainId) => {
      const id = normalizeChainId(chainId);
      const unsupported = !this.options.chains.find((c) => c.chainId === id);
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    this.options = options;
  }
  async connect(args) {
    if (args.chainId) {
      this.switchChain(args.chainId);
    }
    const signer = await this.getSigner();
    const address = await signer.getAddress();
    return address;
  }
  async disconnect() {
    this._provider = void 0;
    this._signer = void 0;
  }
  async getAddress() {
    const signer = await this.getSigner();
    if (!signer) {
      throw new Error("No signer found");
    }
    return await signer.getAddress();
  }
  async isConnected() {
    try {
      const addr = await this.getAddress();
      return !!addr;
    } catch {
      return false;
    }
  }
  async getProvider() {
    if (!this._provider) {
      this._provider = getChainProvider(this.options.chain, {
        clientId: this.options.clientId,
        secretKey: this.options.secretKey
      });
    }
    return this._provider;
  }
  async getSigner() {
    if (!this._signer) {
      const provider = await this.getProvider();
      this._signer = getSignerFromEthersWallet(this.options.ethersWallet, provider);
    }
    return this._signer;
  }
  async switchChain(chainId) {
    const chain = this.options.chains.find((c) => c.chainId === chainId);
    if (!chain) {
      throw new Error(`Chain not found for chainId ${chainId}, please add it to the chains property when creating this wallet`);
    }
    this._provider = getChainProvider(chain, {
      clientId: this.options.clientId,
      secretKey: this.options.secretKey
    });
    this._signer = getSignerFromEthersWallet(this.options.ethersWallet, this._provider);
    this.onChainChanged(chainId);
  }
  async setupListeners() {
  }
  updateChains(chains) {
    this.options.chains = chains;
  }
};
function getSignerFromEthersWallet(ethersWallet, provider) {
  let signer = ethersWallet;
  if (provider) {
    signer = ethersWallet.connect(provider);
  }
  return new WrappedSigner(signer);
}
export {
  LocalWalletConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm-O6RXJ5AE.js.map

import {
  ContractInterceptor
} from "./chunk-JFA442KI.js";
import {
  ContractRoles
} from "./chunk-WNMIUQ6V.js";
import {
  ContractAppURI,
  ContractEncoder,
  ContractEvents,
  ContractMetadata,
  GasCostEstimator,
  fetchCurrencyValue
} from "./chunk-LXY7U6R5.js";
import {
  ADMIN_ROLE,
  AbiSchema,
  ContractWrapper,
  SplitsContractSchema,
  Transaction,
  buildTransactionFunction,
  require_bs58,
  resolveAddress
} from "./chunk-CFECTRPO.js";
import {
  require_utils
} from "./chunk-LM37R6ZK.js";
import "./chunk-I3A4RD7G.js";
import "./chunk-JP4SQOMD.js";
import "./chunk-RDJCVU2P.js";
import "./chunk-GJMET5ED.js";
import "./chunk-S7TFJEVG.js";
import "./chunk-5GFA5ZH5.js";
import "./chunk-EGWPWJMJ.js";
import "./chunk-QWFIJIBR.js";
import "./chunk-JBLG36RJ.js";
import "./chunk-RRKG2OFG.js";
import "./chunk-6XWYBKHF.js";
import {
  Contract,
  init_lib7 as init_lib
} from "./chunk-P6GEGE7G.js";
import {
  BigNumber
} from "./chunk-77SMNJM3.js";
import "./chunk-OPAF3CF6.js";
import {
  require_bn
} from "./chunk-H3V7PHW7.js";
import {
  init_shim
} from "./chunk-6E35MBRA.js";
import {
  __publicField,
  __toESM
} from "./chunk-IJ7IQSKN.js";

// node_modules/@thirdweb-dev/sdk/dist/split-2ad42b19.browser.esm.js
init_shim();
init_lib();
var import_bn = __toESM(require_bn());
var import_bs58 = __toESM(require_bs58());
var import_utils = __toESM(require_utils());
var _Split = class {
  constructor(network, address, storage) {
    __publicField(this, "withdraw", buildTransactionFunction(async (walletAddress) => {
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "release(address)",
        args: [await resolveAddress(walletAddress)]
      });
    }));
    __publicField(this, "withdrawToken", buildTransactionFunction(async (walletAddress, tokenAddress) => {
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "release(address,address)",
        args: await Promise.all([resolveAddress(tokenAddress), resolveAddress(walletAddress)])
      });
    }));
    __publicField(this, "distribute", buildTransactionFunction(async () => {
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "distribute()",
        args: []
      });
    }));
    __publicField(this, "distributeToken", buildTransactionFunction(async (tokenAddress) => {
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "distribute(address)",
        args: [await resolveAddress(tokenAddress)]
      });
    }));
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    let abi = arguments.length > 4 ? arguments[4] : void 0;
    let chainId = arguments.length > 5 ? arguments[5] : void 0;
    let contractWrapper = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);
    this._chainId = chainId;
    this.abi = AbiSchema.parse(abi || []);
    this.contractWrapper = contractWrapper;
    this.storage = storage;
    this.metadata = new ContractMetadata(this.contractWrapper, SplitsContractSchema, this.storage);
    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);
    this.roles = new ContractRoles(this.contractWrapper, _Split.contractRoles);
    this.encoder = new ContractEncoder(this.contractWrapper);
    this.estimator = new GasCostEstimator(this.contractWrapper);
    this.events = new ContractEvents(this.contractWrapper);
    this.interceptor = new ContractInterceptor(this.contractWrapper);
  }
  get chainId() {
    return this._chainId;
  }
  onNetworkUpdated(network) {
    this.contractWrapper.updateSignerOrProvider(network);
  }
  getAddress() {
    return this.contractWrapper.address;
  }
  async getAllRecipients() {
    const recipients = [];
    let index = BigNumber.from(0);
    const totalRecipients = await this.contractWrapper.read("payeeCount", []);
    while (index.lt(totalRecipients)) {
      try {
        const recipientAddress = await this.contractWrapper.read("payee", [index]);
        recipients.push(await this.getRecipientSplitPercentage(recipientAddress));
        index = index.add(1);
      } catch (err) {
        if ("method" in err && err["method"].toLowerCase().includes("payee(uint256)")) {
          break;
        } else {
          throw err;
        }
      }
    }
    return recipients;
  }
  async balanceOfAllRecipients() {
    const recipients = await this.getAllRecipients();
    const balances = {};
    for (const recipient of recipients) {
      balances[recipient.address] = await this.balanceOf(recipient.address);
    }
    return balances;
  }
  async balanceOfTokenAllRecipients(tokenAddress) {
    const [resolvedToken, recipients] = await Promise.all([resolveAddress(tokenAddress), this.getAllRecipients()]);
    const balances = {};
    for (const recipient of recipients) {
      balances[recipient.address] = await this.balanceOfToken(recipient.address, resolvedToken);
    }
    return balances;
  }
  async balanceOf(address) {
    const [resolvedAddress, walletBalance, totalReleased] = await Promise.all([resolveAddress(address), this.contractWrapper.getProvider().getBalance(this.getAddress()), this.contractWrapper.read("totalReleased", [])]);
    const totalReceived = walletBalance.add(totalReleased);
    return this._pendingPayment(resolvedAddress, totalReceived, await this.contractWrapper.read("released", [resolvedAddress]));
  }
  async balanceOfToken(walletAddress, tokenAddress) {
    const [resolvedToken, resolvedWallet] = await Promise.all([resolveAddress(tokenAddress), resolveAddress(walletAddress)]);
    const ERC20Abi = (await import("./IERC20-GHSR35K6.js")).default;
    const erc20 = new Contract(resolvedToken, ERC20Abi, this.contractWrapper.getProvider());
    const [walletBalance, totalReleased, alreadyReleased] = await Promise.all([erc20.balanceOf(this.getAddress()), this.contractWrapper.read("totalReleased", [resolvedToken]), this.contractWrapper.read("released", [resolvedToken, resolvedWallet])]);
    const totalReceived = walletBalance.add(totalReleased);
    const value = await this._pendingPayment(resolvedWallet, totalReceived, alreadyReleased);
    return await fetchCurrencyValue(this.contractWrapper.getProvider(), resolvedToken, value);
  }
  async getRecipientSplitPercentage(address) {
    const [resolvedAddress, totalShares, walletsShares] = await Promise.all([resolveAddress(address), this.contractWrapper.read("totalShares", []), this.contractWrapper.read("shares", [address])]);
    return {
      address: resolvedAddress,
      splitPercentage: walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5
    };
  }
  async _pendingPayment(address, totalReceived, alreadyReleased) {
    const [resolvedAddress, totalShares] = await Promise.all([resolveAddress(address), this.contractWrapper.read("totalShares", [])]);
    const addressReceived = totalReceived.mul(await this.contractWrapper.read("shares", [resolvedAddress]));
    const totalRoyaltyAvailable = addressReceived.div(totalShares);
    return totalRoyaltyAvailable.sub(alreadyReleased);
  }
  async prepare(method, args, overrides) {
    return Transaction.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method,
      args,
      overrides
    });
  }
  async call(functionName, args, overrides) {
    return this.contractWrapper.call(functionName, args, overrides);
  }
};
var Split = _Split;
__publicField(Split, "contractRoles", ADMIN_ROLE);
export {
  Split
};
//# sourceMappingURL=split-2ad42b19.browser.esm-J3WZM3Z6.js.map

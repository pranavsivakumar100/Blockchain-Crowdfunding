import{S as R,d as k,r as w,h as B,c as H,i as T,s as C,a as _,C as D,b as K,e as P,f as W,g as V,j as M,E as $,k as b,A as x,B as d,T as I,l as L,t as O,m as z,n as j,o as N,p as J,q as S,L as G,u as q,v as Y,_ as Z,W as Q,M as X,w as tt,x as F,y as et,z as at,D as st,F as rt,G as A}from"./index.b8b39119.js";async function v(n){const t=await w(n);return Object.keys(t).map(e=>{let a=t[e];return(typeof a!="string"||!a.startsWith("0x"))&&(a=N(a)),[e,a]}).reduce((e,a)=>{let[s,r]=a;return{...e,[s]:r}},{})}async function it(n,t,e){const a=await w(n),s={sender:a.sender,nonce:a.nonce,initCodeHash:A(a.initCode),callDataHash:A(a.callData),callGasLimit:a.callGasLimit,verificationGasLimit:a.verificationGasLimit,preVerificationGas:a.preVerificationGas,maxFeePerGas:a.maxFeePerGas,maxPriorityFeePerGas:a.maxPriorityFeePerGas,paymasterAndDataHash:A(a.paymasterAndData)},r={components:[{type:"address",name:"sender"},{type:"uint256",name:"nonce"},{type:"bytes32",name:"initCodeHash"},{type:"bytes32",name:"callDataHash"},{type:"uint256",name:"callGasLimit"},{type:"uint256",name:"verificationGasLimit"},{type:"uint256",name:"preVerificationGas"},{type:"uint256",name:"maxFeePerGas"},{type:"uint256",name:"maxPriorityFeePerGas"},{type:"bytes32",name:"paymasterAndDataHash"}],name:"hashedUserOp",type:"tuple"},i=P.encode([r],[{...s}]),o=A(i),u=P.encode(["bytes32","address","uint256"],[o,t,e]);return A(u)}const nt=()=>{const n=BigInt(Math.floor(Math.random()*4294967296)),t=BigInt(Math.floor(Math.random()*4294967296)),e=BigInt(Math.floor(Math.random()*4294967296)),a=BigInt(Math.floor(Math.random()*4294967296)),s=BigInt(Math.floor(Math.random()*4294967296)),r=BigInt(Math.floor(Math.random()*4294967296));return n<<BigInt(160)|t<<BigInt(128)|e<<BigInt(96)|a<<BigInt(64)|s<<BigInt(32)|r},U=()=>{let n=nt().toString(16);return n.length%2!==0&&(n="0"+n),n="0x"+n,d.from(J([n,"0x0000000000000000"]))};class ot{}class ct{constructor(t,e,a,s,r){this.bundlerUrl=t,this.entryPointAddress=e,this.chainId=a;const i={};if(T(this.bundlerUrl)){const o=typeof globalThis<"u"&&"APP_BUNDLE_ID"in globalThis?globalThis.APP_BUNDLE_ID:void 0;r?i["x-secret-key"]=r:s&&(i["x-client-id"]=s,o&&(i["x-bundle-id"]=o)),typeof globalThis<"u"&&"TW_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_AUTH_TOKEN=="string"&&(i.authorization=`Bearer ${globalThis.TW_AUTH_TOKEN}`),typeof globalThis<"u"&&"TW_CLI_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_CLI_AUTH_TOKEN=="string"&&(i.authorization=`Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`,i["x-authorize-wallet"]="true"),C(i)}this.userOpJsonRpcProvider=new _({url:this.bundlerUrl,headers:i},{name:"Connected bundler network",chainId:a}),this.initializing=this.validateChainId()}async validateChainId(){const t=await this.userOpJsonRpcProvider.send("eth_chainId",[]),e=parseInt(t);if(e!==this.chainId)throw new Error(`bundler ${this.bundlerUrl} is on chainId ${e}, but provider is on chainId ${this.chainId}`)}async sendUserOpToBundler(t){await this.initializing;const e=await v(t),a=[e,this.entryPointAddress];return await this.printUserOperation("eth_sendUserOperation",a),await this.userOpJsonRpcProvider.send("eth_sendUserOperation",[e,this.entryPointAddress])}async estimateUserOpGas(t){await this.initializing;const e=await v(t),a=[e,this.entryPointAddress];await this.printUserOperation("eth_estimateUserOperationGas",a);const s=await this.userOpJsonRpcProvider.send("eth_estimateUserOperationGas",[e,this.entryPointAddress]);return{preVerificationGas:d.from(s.preVerificationGas),verificationGas:d.from(s.verificationGas),verificationGasLimit:d.from(s.verificationGasLimit),callGasLimit:d.from(s.callGasLimit).add(X)}}async getUserOperationGasPrice(){return await this.initializing,await this.userOpJsonRpcProvider.send("thirdweb_getUserOperationGasPrice",[])}async getUserOperationReceipt(t){return await this.initializing,await this.userOpJsonRpcProvider.send("eth_getUserOperationReceipt",[t])}async printUserOperation(t,e){}}class dt extends ot{constructor(t,e,a,s){super(),this.paymasterUrl=t,this.entryPoint=e,this.clientId=a,this.secretKey=s}async getPaymasterAndData(t){const e={"Content-Type":"application/json"};if(T(this.paymasterUrl)){if(this.secretKey&&this.clientId)throw new Error("Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.");if(this.secretKey)e["x-secret-key"]=this.secretKey;else if(this.clientId){e["x-client-id"]=this.clientId;const r=typeof globalThis<"u"&&"APP_BUNDLE_ID"in globalThis?globalThis.APP_BUNDLE_ID:void 0;r&&(e["x-bundle-id"]=r)}typeof globalThis<"u"&&"TW_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_AUTH_TOKEN=="string"&&(e.authorization=`Bearer ${globalThis.TW_AUTH_TOKEN}`),typeof globalThis<"u"&&"TW_CLI_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_CLI_AUTH_TOKEN=="string"&&(e.authorization=`Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`,e["x-authorize-wallet"]="true"),C(e)}const a=await fetch(this.paymasterUrl,{method:"POST",headers:e,body:JSON.stringify({jsonrpc:"2.0",id:1,method:"pm_sponsorUserOperation",params:[await v(t),this.entryPoint]})}),s=await a.json();if(!a.ok){const r=s.error||a.statusText,i=s.code||"UNKNOWN";throw new Error(`Paymaster error: ${r}
Status: ${a.status}
Code: ${i}`)}if(s.result)return typeof s.result=="string"?{paymasterAndData:s.result}:s.result;{const r=s.error?.message||s.error||a.statusText||"unknown error";throw new Error(`Paymaster error from ${this.paymasterUrl}: ${r}`)}}}const ht=(n,t,e,a)=>new dt(n,t,e,a);class E{constructor(t,e,a,s,r,i,o){this.resolve=t,this.reject=e,this.entryPoint=a,this.sender=s,this.userOpHash=r,this.nonce=i,this.timeout=o,F(this,"resolved",!1),this.boundLisener=this.listenerCallback.bind(this)}start(){const t=this.entryPoint.filters.UserOperationEvent(this.userOpHash);setTimeout(async()=>{const e=await this.entryPoint.queryFilter(t,-10);e.length>0?this.listenerCallback(e[0]):this.entryPoint.once(t,this.boundLisener)},100)}stop(){this.entryPoint.off("UserOperationEvent",this.boundLisener)}async listenerCallback(){for(var t=arguments.length,e=new Array(t),a=0;a<t;a++)e[a]=arguments[a];const s=arguments[arguments.length-1];if(!s.args){console.error("got event without args",s);return}if(s.args.userOpHash!==this.userOpHash){console.log(`== event with wrong userOpHash: sender/nonce: event.${s.args.sender}@${s.args.nonce.toString()}!= userOp.${this.sender}@${parseInt(this.nonce?.toString())}`);return}const r=await s.getTransactionReceipt();s.args.success||await this.extractFailureReason(r),this.stop(),this.resolve(r),this.resolved=!0}async extractFailureReason(t){t.status=0;const e=await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash,this.sender),t.blockHash);if(e[0]){let a=e[0].args.revertReason;a.startsWith("0x08c379a0")&&(a=P.decode(["string"],"0x"+a.substring(10)).toString()),this.reject(new Error(`UserOp failed with reason: ${a}`))}}}class lt extends R{constructor(t,e,a,s,r){super(),k(this,"provider",a),this.config=t,this.originalSigner=e,this.erc4337provider=a,this.httpRpcClient=s,this.smartAccountAPI=r,this.approving=!1}async sendTransaction(t,e){if(!this.approving){this.approving=!0;const u=await this.smartAccountAPI.createApproveTx();u&&await(await this.sendTransaction(u)).wait(),this.approving=!1}const a=await w(t);await this.verifyAllNecessaryFields(a);const s=U(),r=await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient,{target:a.to||"",data:a.data?.toString()||"0x",value:a.value,gasLimit:a.gasLimit,nonce:s,maxFeePerGas:a.maxFeePerGas,maxPriorityFeePerGas:a.maxPriorityFeePerGas},e),i=await this.smartAccountAPI.signUserOp(r),o=await this.erc4337provider.constructUserOpTransactionResponse(i);try{await this.httpRpcClient.sendUserOpToBundler(i)}catch(u){throw this.unwrapError(u)}return o}unwrapError(t){try{let e="Unknown Error";if(t.error)e=`The bundler has failed to include UserOperation in a batch: ${t.error}`;else if(t.body&&typeof t.body=="string"){const s=JSON.parse(t.body),r=t.status||"UNKNOWN",i=s?.code||"UNKNOWN";let o=s?.error?.message||s?.error?.data||s?.error||t.reason;if(o?.includes("FailedOp")){let u="";const l=o.match(/FailedOp\((.*)\)/);if(l){const p=l[1].split(",");u=`(paymaster address: ${p[1]})`,o=p[2]}e=`The bundler has failed to include UserOperation in a batch: ${o} ${u}`}else e=`RPC error: ${o}
Status: ${r}
Code: ${i}`}const a=new Error(e);return a.stack=t.stack,a}catch{}return t}async verifyAllNecessaryFields(t){if(!t.to)throw new Error("Missing call target");if(!t.data&&!t.value)throw new Error("Missing call data or value")}connect(t){throw new Error("changing providers is not supported")}async getAddress(){return this.address||(this.address=await this.erc4337provider.getSenderAccountAddress()),this.address}async signMessage(t){await this.smartAccountAPI.checkAccountPhantom()&&(console.log("Account contract not deployed yet. Deploying account before signing message"),await(await this.sendTransaction({to:await this.getAddress(),data:"0x"})).wait());const[a,s]=await Promise.all([this.getChainId(),this.getAddress()]),r=B(t);let i,o;const u=H(a,this.config.clientId),l={};if(T(u)){const c=typeof globalThis<"u"&&"APP_BUNDLE_ID"in globalThis?globalThis.APP_BUNDLE_ID:void 0;this.config.secretKey?l["x-secret-key"]=this.config.secretKey:this.config.clientId&&(l["x-client-id"]=this.config.clientId,c&&(l["x-bundle-id"]=c)),typeof globalThis<"u"&&"TW_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_AUTH_TOKEN=="string"&&(l.authorization=`Bearer ${globalThis.TW_AUTH_TOKEN}`),typeof globalThis<"u"&&"TW_CLI_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_CLI_AUTH_TOKEN=="string"&&(l.authorization=`Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`,l["x-authorize-wallet"]="true"),C(l)}try{const c=new _({url:u,headers:l},a);await new D(s,["function getMessageHash(bytes32 _hash) public view returns (bytes32)"],c).getMessageHash(r),i=!0}catch{i=!1}if(i?o=(await K(this,{name:"Account",version:"1",chainId:a,verifyingContract:s},{AccountMessage:[{name:"message",type:"bytes"}]},{message:P.encode(["bytes32"],[r])})).signature:o=await this.originalSigner.signMessage(t),await W(t,o,s,a,this.config.clientId,this.config.secretKey))return o;throw new Error("Unable to verify signature on smart account, please make sure the smart account is deployed and the signature is valid.")}async signTransaction(t,e){const a=await w(t);await this.verifyAllNecessaryFields(a);const s=U(),r=await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient,{target:a.to||"",data:a.data?.toString()||"0x",value:a.value,gasLimit:a.gasLimit,nonce:s},e),i=await this.smartAccountAPI.signUserOp(r);return JSON.stringify(await v(i))}}class ut extends tt{constructor(t,e,a,s,r,i,o){super({name:"ERC-4337 Custom Network",chainId:t}),this.chainId=t,this.config=e,this.originalSigner=a,this.originalProvider=s,this.httpRpcClient=r,this.entryPoint=i,this.smartAccountAPI=o,this.signer=new lt(e,a,this,r,o)}getSigner(){return this.signer}async perform(t,e){if(t==="sendTransaction"||t==="getTransactionReceipt")throw new Error("Should not get here. Investigate.");return t==="estimateGas"?d.from(5e5):await this.originalProvider.perform(t,e)}async getTransaction(t){return await super.getTransaction(t)}async getTransactionReceipt(t){const e=await t,a=await this.getSenderAccountAddress();return await new Promise((s,r)=>{new E(s,r,this.entryPoint,a,e).start()})}async getSenderAccountAddress(){return await this.smartAccountAPI.getAccountAddress()}async waitForTransaction(t,e,a){const s=await this.getSenderAccountAddress();return await new Promise((r,i)=>{new E(r,i,this.entryPoint,s,t,void 0,a).start()})}async constructUserOpTransactionResponse(t){const e=await w(t),a=await this.smartAccountAPI.getUserOpHash(e);return{hash:a,confirmations:0,from:e.sender,nonce:0,gasLimit:d.from(e.callGasLimit),value:d.from(0),data:N(e.callData),chainId:this.chainId,wait:async s=>{const r=await this.smartAccountAPI.getUserOpReceipt(this.httpRpcClient,a);return e.initCode.length!==0&&await this.smartAccountAPI.checkAccountPhantom(),r}}}async detectNetwork(){return this.originalProvider.detectNetwork()}}function gt(n,t,e,a){const s=S.EntryPoint__factory.connect(n.entryPointAddress,e),r=new ct(n.bundlerUrl,n.entryPointAddress,a,n.clientId,n.secretKey);return new ut(a,n,n.localSigner,e,r,s,t)}const pt="0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c";class ft{constructor(t){F(this,"isPhantom",!0),this.provider=t.provider,this.entryPointAddress=t.entryPointAddress,this.accountAddress=t.accountAddress,this.paymasterAPI=t.paymasterAPI,this.gasless=t.gasless,this.erc20PaymasterAddress=t.erc20PaymasterAddress,this.erc20TokenAddress=t.erc20TokenAddress,this.entryPointView=S.EntryPoint__factory.connect(t.entryPointAddress,t.provider).connect(x)}async checkAccountPhantom(){return this.isPhantom?((await this.provider.getCode(this.getAccountAddress())).length>2&&(this.isPhantom=!1),this.isPhantom):this.isPhantom}async getInitCode(){return await this.checkAccountPhantom()?await this.getAccountInitCode():"0x"}async getVerificationGasLimit(){return 1e5}async getUserOpHash(t){const e=await this.provider.getNetwork().then(a=>a.chainId);return it(t,this.entryPointAddress,e)}async getAccountAddress(){return this.senderAddress||(this.accountAddress?this.senderAddress=this.accountAddress:this.senderAddress=await this.getCounterFactualAddress()),this.senderAddress}async estimateCreationGas(t){if(!t||t==="0x")return 0;const e=t.substring(0,42),a="0x"+t.substring(42);return await this.provider.estimateGas({to:e,data:a})}async createUnsignedUserOp(t,e,a){let{maxFeePerGas:s,maxPriorityFeePerGas:r}=e;if(T(t.bundlerUrl)){const h=await t.getUserOperationGasPrice();s=d.from(h.maxFeePerGas),r=d.from(h.maxPriorityFeePerGas)}else if(!s||!r){const h=await et(this.provider);if(r||(r=h.maxPriorityFeePerGas??void 0),!s){s=h.maxFeePerGas??void 0;const f=(await this.provider.getNetwork()).chainId;(f===at.chainId||f===st.chainId||f===rt.chainId)&&(r=s)}}if(!s||!r)throw new Error("maxFeePerGas or maxPriorityFeePerGas could not be calculated, please pass them explicitely");const[i,o]=await Promise.all([this.getAccountAddress(),e.nonce?Promise.resolve(e.nonce):this.getNonce()]),u=await this.getInitCode(),l=wt(e.value)??d.from(0),p=a?.batchData?e.data:await this.prepareExecute(e.target,l,e.data).then(async h=>(e.gasLimit||await this.provider.estimateGas({from:i,to:e.target,data:e.data,value:l}),h.encode())),c={sender:i,nonce:o,initCode:u,callData:p,maxFeePerGas:s,maxPriorityFeePerGas:r,callGasLimit:d.from(1e6),verificationGasLimit:d.from(1e6),preVerificationGas:d.from(1e6),paymasterAndData:"0x",signature:pt},m=a?.gasless!==void 0?a.gasless:this.gasless;if(this.erc20PaymasterAddress&&this.erc20TokenAddress&&await this.isAccountApproved()){c.paymasterAndData=this.erc20PaymasterAddress;let h;try{h=await t.estimateUserOpGas(c)}catch(g){throw this.unwrapBundlerError(g)}c.callGasLimit=h.callGasLimit,c.verificationGasLimit=h.verificationGasLimit,c.preVerificationGas=h.preVerificationGas}else if(m){const h=await this.paymasterAPI.getPaymasterAndData(c),g=h.paymasterAndData;if(g&&g!=="0x"&&(c.paymasterAndData=g),h.callGasLimit&&h.verificationGasLimit&&h.preVerificationGas)c.callGasLimit=d.from(h.callGasLimit),c.verificationGasLimit=d.from(h.verificationGasLimit),c.preVerificationGas=d.from(h.preVerificationGas);else{let f;try{f=await t.estimateUserOpGas(c)}catch(y){throw this.unwrapBundlerError(y)}if(c.callGasLimit=f.callGasLimit,c.verificationGasLimit=f.verificationGasLimit,c.preVerificationGas=f.preVerificationGas,g&&g!=="0x"){const y=await this.paymasterAPI.getPaymasterAndData(c);y.paymasterAndData&&y.paymasterAndData!=="0x"&&(c.paymasterAndData=y.paymasterAndData)}}}else{let h;try{h=await t.estimateUserOpGas(c)}catch(g){throw this.unwrapBundlerError(g)}c.callGasLimit=h.callGasLimit,c.verificationGasLimit=h.verificationGasLimit,c.preVerificationGas=h.preVerificationGas}return{...c,signature:""}}async signUserOp(t){const e=await this.getUserOpHash(t),a=await this.signUserOpHash(e);return{...t,signature:a}}async getUserOpReceipt(t,e){let a=arguments.length>2&&arguments[2]!==void 0?arguments[2]:12e4,s=arguments.length>3&&arguments[3]!==void 0?arguments[3]:1e3;const r=Date.now()+a;for(;Date.now()<r;){const i=await t.getUserOperationReceipt(e);if(i)return await this.provider.waitForTransaction(i.receipt.transactionHash);await new Promise(o=>setTimeout(o,s))}throw new Error("Timeout waiting for userOp to be mined")}unwrapBundlerError(t){const e=t?.error?.message||t.error||t.message||t;return new Error(e)}}function wt(n){return!n||n===""?null:d.from(n.toString())}class mt extends ft{constructor(t,e){super({...t,provider:e}),this.params=t,this.sdk=I.fromPrivateKey(G,t.chain,{clientId:t.clientId,secretKey:t.secretKey,supportedChains:typeof t.chain=="object"?[t.chain]:void 0})}async getChainId(){return await this.provider.getNetwork().then(t=>t.chainId)}async getAccountContract(){return this.accountContract||(this.params.accountInfo?.abi?this.accountContract=await this.sdk.getContract(await this.getAccountAddress(),this.params.accountInfo.abi):this.accountContract=await this.sdk.getContract(await this.getAccountAddress(),L)),this.accountContract}async getAccountInitCode(){const t=await this.getFactoryContract(),e=await this.params.localSigner.getAddress(),a=await this.params.factoryInfo.createAccount(t,e);return q([t.getAddress(),a.encode()])}async getFactoryContract(){return this.factoryContract?this.factoryContract:(this.params.factoryInfo?.abi?this.factoryContract=await this.sdk.getContract(this.params.factoryAddress,this.params.factoryInfo.abi):this.factoryContract=await this.sdk.getContract(this.params.factoryAddress),this.factoryContract)}async getCounterFactualAddress(){if(this.params.accountAddress)return this.params.accountAddress;const t=await this.getFactoryContract(),e=await this.params.localSigner.getAddress();return this.params.factoryInfo.getAccountAddress(t,e)}async getNonce(){if(await this.checkAccountPhantom())return d.from(0);const t=await this.getAccountContract();return this.params.accountInfo.getNonce(t)}async prepareExecute(t,e,a){const s=await this.getAccountContract();return this.params.accountInfo.execute(s,t,e,a)}async prepareExecuteBatch(t,e,a){return(await this.getAccountContract()).prepare("executeBatch",[t,e,a])}async signUserOpHash(t){return await this.params.localSigner.signMessage(Y(t))}async isAcountDeployed(){return!await this.checkAccountPhantom()}async isAccountApproved(){if(!this.params.erc20PaymasterAddress||!this.params.erc20TokenAddress)return!0;const t=await this.getCounterFactualAddress(),e=(await Z(()=>import("./index.b8b39119.js").then(r=>r.el),["assets/index.b8b39119.js","assets/index.274eef26.css"])).default;return(await(await this.sdk.getContract(this.params.erc20TokenAddress,e)).call("allowance",[t,this.params.erc20PaymasterAddress])).gte(d.from(2).pow(96).sub(1))}async createApproveTx(){if(await this.isAccountApproved())return;const t=d.from(2).pow(96).sub(1),e=new Q(G,this.provider),a=new D(this.params.erc20TokenAddress,["function approve(address spender, uint256 amount) public returns (bool)"],e);return{to:this.params.erc20TokenAddress,from:await this.getAccountAddress(),value:0,data:a.interface.encodeFunctionData("approve",[this.params.erc20PaymasterAddress,t])}}}class Pt extends V{constructor(t){super(),this.config=t}async initialize(t){const e=this.config,a=M(e.chain,{clientId:e.clientId,secretKey:e.secretKey});this.chainId=(await a.getNetwork()).chainId;const s=this.config.bundlerUrl||`https://${this.chainId}.bundler.thirdweb.com`,r=this.config.paymasterUrl||`https://${this.chainId}.bundler.thirdweb.com`,i=e.entryPointAddress||$,o=await t.personalWallet.getSigner(),u={chain:e.chain,localSigner:o,entryPointAddress:i,bundlerUrl:s,paymasterAPI:this.config.paymasterAPI?this.config.paymasterAPI:ht(r,i,this.config.clientId,this.config.secretKey),gasless:e.gasless,factoryAddress:e.factoryAddress,accountAddress:t.accountAddress,factoryInfo:{createAccount:e.factoryInfo?.createAccount||this.defaultFactoryInfo().createAccount,getAccountAddress:e.factoryInfo?.getAccountAddress||this.defaultFactoryInfo().getAccountAddress,abi:e.factoryInfo?.abi},accountInfo:{execute:e.accountInfo?.execute||this.defaultAccountInfo().execute,getNonce:e.accountInfo?.getNonce||this.defaultAccountInfo().getNonce,abi:e.accountInfo?.abi},clientId:e.clientId,secretKey:e.secretKey,erc20PaymasterAddress:e.erc20PaymasterAddress,erc20TokenAddress:e.erc20TokenAddress};this.personalWallet=t.personalWallet;const l=new mt(u,a);this.aaProvider=gt(u,l,a,this.chainId),this.accountApi=l}async connect(t){return await this.initialize(t),await this.getAddress()}getProvider(){if(!this.aaProvider)throw new Error("Personal wallet not connected");return Promise.resolve(this.aaProvider)}async getSigner(){if(!this.aaProvider)throw new Error("Personal wallet not connected");return Promise.resolve(this.aaProvider.getSigner())}async getAddress(){return(await this.getSigner()).getAddress()}async isConnected(){try{return!!await this.getAddress()}catch{return!1}}async disconnect(){this.personalWallet=void 0,this.aaProvider=void 0}async switchChain(t){if((await(await this.getProvider()).getNetwork()).chainId!==t)throw new Error("Not supported.")}setupListeners(){return Promise.resolve()}updateChains(t){}async hasPermissionToExecute(t){const e=await this.getAccountContract(),s=await(await this.getSigner()).getAddress(),r=(await e.account.getAllSigners()).filter(i=>b(i.signer)===b(s))[0]?.permissions;return r?r.approvedCallTargets.includes(t.getTarget()):!1}async send(t,e){return(await this.getSigner()).sendTransaction({to:t.getTarget(),data:t.encode(),value:await t.getValue()},e)}async execute(t,e){return{receipt:await(await this.send(t,e)).wait()}}async sendBatch(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");const a=await this.getSigner(),{tx:s,batchData:r}=await this.prepareBatchTx(t);return await a.sendTransaction({to:await a.getAddress(),data:s.encode(),value:0},{...e,batchData:r})}async executeBatch(t,e){return{receipt:await(await this.sendBatch(t,e)).wait()}}async sendRaw(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");return(await this.getSigner()).sendTransaction(t,e)}async executeRaw(t,e){return{receipt:await(await this.sendRaw(t,e)).wait()}}async sendBatchRaw(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");const a=await this.getSigner(),s=await this.prepareBatchRaw(t);return a.sendTransaction({to:await a.getAddress(),data:s.tx.encode(),value:0},{...e,batchData:s.batchData})}async executeBatchRaw(t,e){return{receipt:await(await this.sendBatchRaw(t,e)).wait()}}async estimate(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");return this.estimateTx({target:t.getTarget(),data:t.encode(),value:await t.getValue(),gasLimit:await t.getOverrides().gasLimit,maxFeePerGas:await t.getOverrides().maxFeePerGas,maxPriorityFeePerGas:await t.getOverrides().maxPriorityFeePerGas,nonce:await t.getOverrides().nonce},e)}async estimateRaw(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");const a=await w(t);return this.estimateTx({target:a.to||x,data:a.data?.toString()||"",value:a.value||d.from(0),gasLimit:a.gasLimit,maxFeePerGas:a.maxFeePerGas,maxPriorityFeePerGas:a.maxPriorityFeePerGas,nonce:a.nonce},e)}async estimateBatch(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");const{tx:a,batchData:s}=await this.prepareBatchTx(t);return this.estimateTx({target:a.getTarget(),data:a.encode(),value:await a.getValue(),gasLimit:await a.getOverrides().gasLimit,maxFeePerGas:await a.getOverrides().maxFeePerGas,maxPriorityFeePerGas:await a.getOverrides().maxPriorityFeePerGas,nonce:await a.getOverrides().nonce},{...e,batchData:s})}async estimateBatchRaw(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");const{tx:a,batchData:s}=await this.prepareBatchRaw(t);return this.estimateTx({target:a.getTarget(),data:a.encode(),value:await a.getValue(),gasLimit:await a.getOverrides().gasLimit,maxFeePerGas:await a.getOverrides().maxFeePerGas,maxPriorityFeePerGas:await a.getOverrides().maxPriorityFeePerGas,nonce:await a.getOverrides().nonce},{...e,batchData:s})}async deploy(t){if(!this.accountApi)throw new Error("Personal wallet not connected");const e=await this.getSigner();return{receipt:await(await e.sendTransaction({to:await e.getAddress(),data:"0x"},{...t,batchData:{targets:[],data:[],values:[]}})).wait()}}async isDeployed(){if(!this.accountApi)throw new Error("Personal wallet not connected");return await this.accountApi.isAcountDeployed()}async deployIfNeeded(t){await this.isDeployed()||await this.deploy(t)}async grantPermissions(t,e){return(await this.getAccountContract()).account.grantPermissions(t,e)}async revokePermissions(t){return(await this.getAccountContract()).account.revokeAccess(t)}async addAdmin(t){return(await this.getAccountContract()).account.grantAdminPermissions(t)}async removeAdmin(t){return(await this.getAccountContract()).account.revokeAdminPermissions(t)}async getAllActiveSigners(){if(await this.isDeployed())return(await this.getAccountContract()).account.getAllAdminsAndSigners();{const e=await this.personalWallet?.getSigner();if(!e)throw new Error("Personal wallet not connected");return[{isAdmin:!0,signer:await e.getAddress(),permissions:{startDate:new Date(0),expirationDate:new Date(0),nativeTokenLimitPerTransaction:d.from(0),approvedCallTargets:[]}}]}}async getAccountContract(){const t=I.fromSigner(await this.getSigner(),this.config.chain,{clientId:this.config.clientId,secretKey:this.config.secretKey});return this.config.accountInfo?.abi?t.getContract(await this.getAddress(),this.config.accountInfo.abi):t.getContract(await this.getAddress(),L)}async getFactoryContract(){const t=I.fromSigner(await this.getSigner(),this.config.chain,{clientId:this.config.clientId,secretKey:this.config.secretKey});return this.config.factoryInfo?.abi?t.getContract(this.config.factoryAddress,this.config.factoryInfo.abi):t.getContract(this.config.factoryAddress)}defaultFactoryInfo(){return{createAccount:async(t,e)=>t.prepare("createAccount",[e,O("")]),getAccountAddress:async(t,e)=>await t.call("getAddress",[e,O("")])}}defaultAccountInfo(){return{execute:async(t,e,a,s)=>t.prepare("execute",[e,a,s]),getNonce:async t=>t.call("getNonce",[])}}async estimateTx(t,e){if(!this.accountApi||!this.aaProvider)throw new Error("Personal wallet not connected");let a=d.from(0);const[s,r]=await Promise.all([this.getProvider(),this.isDeployed()]);r||(a=await this.estimateDeploymentGasLimit());const[i,o]=await Promise.all([this.accountApi.createUnsignedUserOp(this.aaProvider.httpRpcClient,t,e),z(s)]),u=await w(i),l=d.from(u.callGasLimit),p=l.mul(o),c=a.mul(o),m=c.add(p);return{ether:j(m),wei:m,details:{deployGasLimit:a,transactionGasLimit:l,gasPrice:o,transactionCost:p,deployCost:c,totalCost:m}}}async estimateDeploymentGasLimit(){if(!this.accountApi)throw new Error("Personal wallet not connected");const t=await this.accountApi.getInitCode(),[e,a]=await Promise.all([this.accountApi.estimateCreationGas(t),this.accountApi.getVerificationGasLimit()]);return d.from(a).add(e)}async prepareBatchRaw(t){if(!this.accountApi)throw new Error("Personal wallet not connected");const e=await Promise.all(t.map(i=>w(i))),a=e.map(i=>i.to||x),s=e.map(i=>i.data||"0x"),r=e.map(i=>i.value||d.from(0));return{tx:await this.accountApi.prepareExecuteBatch(a,r,s),batchData:{targets:a,data:s,values:r}}}async prepareBatchTx(t){if(!this.accountApi)throw new Error("Personal wallet not connected");const e=t.map(r=>r.getTarget()),a=t.map(r=>r.encode()),s=await Promise.all(t.map(r=>r.getValue()));return{tx:await this.accountApi.prepareExecuteBatch(e,s,a),batchData:{targets:e,data:a,values:s}}}}export{Pt as SmartWalletConnector};

import {
  InjectedConnector
} from "./chunk-USOEMV53.js";
import {
  assertWindowEthereum
} from "./chunk-B2TBXXRZ.js";
import "./chunk-GTROIRR6.js";
import "./chunk-NRP2ARH2.js";
import "./chunk-BMLLEUBY.js";
import "./chunk-5DOGRJYJ.js";
import "./chunk-7KVJTDF4.js";
import "./chunk-I3A4RD7G.js";
import "./chunk-JP4SQOMD.js";
import "./chunk-RDJCVU2P.js";
import {
  init_lib7 as init_lib
} from "./chunk-P6GEGE7G.js";
import "./chunk-77SMNJM3.js";
import "./chunk-OPAF3CF6.js";
import "./chunk-H3V7PHW7.js";
import {
  init_shim
} from "./chunk-6E35MBRA.js";
import "./chunk-IJ7IQSKN.js";

// node_modules/@thirdweb-dev/wallets/evm/connectors/imtoken/dist/thirdweb-dev-wallets-evm-connectors-imtoken.browser.esm.js
init_shim();
init_lib();
var ImTokenConnector = class extends InjectedConnector {
  constructor(arg) {
    const defaultOptions = {
      name: "imToken",
      getProvider() {
        function getReady(ethereum) {
          const isImToken = !!ethereum?.isImToken;
          if (!isImToken) {
            return;
          }
          return ethereum;
        }
        if (assertWindowEthereum(globalThis.window)) {
          if (globalThis.window.ethereum?.providers) {
            return globalThis.window.ethereum.providers.find(getReady);
          }
          return getReady(globalThis.window.ethereum);
        }
      }
    };
    const options = {
      ...defaultOptions,
      ...arg.options
    };
    super({
      chains: arg.chains,
      options,
      connectorStorage: arg.connectorStorage
    });
  }
};
export {
  ImTokenConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-imtoken.browser.esm-F53XK6TN.js.map

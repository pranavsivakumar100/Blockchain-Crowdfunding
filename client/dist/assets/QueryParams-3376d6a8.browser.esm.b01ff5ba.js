import{v as E,aX as m,B as i,aQ as h,_ as u,C as l}from"./index.b8b39119.js";import{a as d,C as _}from"./setErc20Allowance-db4e8402.browser.esm.6b5789eb.js";const C=(()=>E("0x80ac58cd"))(),R=(()=>E("0xd9b67a26"))(),w={name:"Failed to load NFT metadata"};async function y(t,a,e){if(a.startsWith("data:application/json;base64")&&typeof m.Buffer<"u"){const o=a.split(",")[1],s=JSON.parse(m.Buffer.from(o,"base64").toString("utf-8"));return d.parse({...s,id:i.from(t).toString(),uri:a})}const n=a.replace("{id}",h(i.from(t).toHexString(),32).slice(2));let r;try{r=await e.downloadJSON(n)}catch{const s=a.replace("{id}",i.from(t).toString());try{r=await e.downloadJSON(s)}catch{console.warn(`failed to get token metadata: ${JSON.stringify({tokenId:t.toString(),tokenUri:a})} -- falling back to default metadata`),r=w}}return d.parse({...r,id:i.from(t).toString(),uri:a})}async function F(t,a,e,n){let r;const o=(await u(()=>import("./IERC165.d81707d1.js"),[])).default,s=new l(t,o,a),[p,b]=await Promise.all([s.supportsInterface(C),s.supportsInterface(R)]);if(p){const c=(await u(()=>import("./index.b8b39119.js").then(f=>f.en),["assets/index.b8b39119.js","assets/index.274eef26.css"])).default;r=await new l(t,c,a).tokenURI(e)}else if(b){const c=(await u(()=>import("./index.b8b39119.js").then(f=>f.ep),["assets/index.b8b39119.js","assets/index.274eef26.css"])).default;r=await new l(t,c,a).uri(e)}else throw Error("Contract must implement ERC 1155 or ERC 721.");return r?y(e,r,n):d.parse({...w,id:i.from(e).toString(),uri:""})}async function S(t,a){return typeof t=="string"?t:await a.upload(_.parse(t))}async function A(t,a,e,n){if(I(t))return t;if(T(t))return await a.uploadBatch(t.map(o=>_.parse(o)),{rewriteFileNames:{fileStartNumber:e||0},onProgress:n?.onProgress});throw new Error("NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)")}function x(t){const a=t[0].substring(0,t[0].lastIndexOf("/"));for(let e=0;e<t.length;e++){const n=t[e].substring(0,t[e].lastIndexOf("/"));if(a!==n)throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${a}' but got '${n}'`)}return a.replace(/\/$/,"")+"/"}function I(t){return t.find(a=>typeof a!="string")===void 0}function T(t){return t.find(a=>typeof a!="object")===void 0}const L=100;export{L as D,w as F,C as I,y as a,S as b,R as c,F as f,x as g,A as u};

import {
  StandardErc20
} from "./chunk-LREEVUEZ.js";
import "./chunk-MRCQTN4N.js";
import {
  DropClaimConditions
} from "./chunk-7Y72NYVJ.js";
import {
  ContractPrimarySale
} from "./chunk-TSZJGRCN.js";
import {
  require_fast_deep_equal
} from "./chunk-INCOK333.js";
import "./chunk-5TGBXTHW.js";
import {
  ContractPlatformFee
} from "./chunk-CUPWV6DQ.js";
import {
  ContractInterceptor
} from "./chunk-JFA442KI.js";
import "./chunk-SRYWWROE.js";
import {
  ContractRoles
} from "./chunk-WNMIUQ6V.js";
import {
  ContractAppURI,
  ContractEncoder,
  ContractEvents,
  ContractMetadata,
  GasCostEstimator
} from "./chunk-LXY7U6R5.js";
import {
  AbiSchema,
  ContractWrapper,
  DropErc20ContractSchema,
  TOKEN_DROP_CONTRACT_ROLES,
  Transaction,
  buildTransactionFunction,
  getRoleHash,
  require_bs58,
  resolveAddress
} from "./chunk-CFECTRPO.js";
import {
  require_utils
} from "./chunk-LM37R6ZK.js";
import "./chunk-I3A4RD7G.js";
import "./chunk-JP4SQOMD.js";
import "./chunk-RDJCVU2P.js";
import "./chunk-GJMET5ED.js";
import "./chunk-S7TFJEVG.js";
import "./chunk-RLHLCECS.js";
import "./chunk-5GFA5ZH5.js";
import "./chunk-EGWPWJMJ.js";
import "./chunk-QWFIJIBR.js";
import "./chunk-JBLG36RJ.js";
import "./chunk-RRKG2OFG.js";
import "./chunk-6XWYBKHF.js";
import {
  init_lib7 as init_lib
} from "./chunk-P6GEGE7G.js";
import {
  lib_exports8 as lib_exports
} from "./chunk-77SMNJM3.js";
import "./chunk-OPAF3CF6.js";
import {
  require_bn
} from "./chunk-H3V7PHW7.js";
import {
  init_shim
} from "./chunk-6E35MBRA.js";
import {
  __publicField,
  __toESM
} from "./chunk-IJ7IQSKN.js";

// node_modules/@thirdweb-dev/sdk/dist/token-drop-4d5b8155.browser.esm.js
init_shim();
init_lib();
var import_bn = __toESM(require_bn());
var import_bs58 = __toESM(require_bs58());
var import_utils = __toESM(require_utils());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
var _TokenDrop = class extends StandardErc20 {
  constructor(network, address, storage) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    let abi = arguments.length > 4 ? arguments[4] : void 0;
    let chainId = arguments.length > 5 ? arguments[5] : void 0;
    let contractWrapper = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);
    super(contractWrapper, storage, chainId);
    __publicField(this, "claim", buildTransactionFunction((() => {
      var _this = this;
      return async function(amount) {
        let checkERC20Allowance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
        return _this.claimTo.prepare(await _this.contractWrapper.getSignerAddress(), amount, checkERC20Allowance);
      };
    })()));
    __publicField(this, "claimTo", buildTransactionFunction((() => {
      var _this2 = this;
      return async function(destinationAddress, amount) {
        let checkERC20Allowance = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
        return _this2.erc20.claimTo.prepare(destinationAddress, amount, {
          checkERC20Allowance
        });
      };
    })()));
    __publicField(this, "delegateTo", buildTransactionFunction(async (delegateeAddress) => {
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "delegate",
        args: [await resolveAddress(delegateeAddress)]
      });
    }));
    __publicField(this, "burnTokens", buildTransactionFunction(async (amount) => {
      return this.erc20.burn.prepare(amount);
    }));
    __publicField(this, "burnFrom", buildTransactionFunction(async (holder, amount) => {
      return this.erc20.burnFrom.prepare(holder, amount);
    }));
    this.abi = AbiSchema.parse(abi || []);
    this.metadata = new ContractMetadata(this.contractWrapper, DropErc20ContractSchema, this.storage);
    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);
    this.roles = new ContractRoles(this.contractWrapper, _TokenDrop.contractRoles);
    this.encoder = new ContractEncoder(this.contractWrapper);
    this.estimator = new GasCostEstimator(this.contractWrapper);
    this.events = new ContractEvents(this.contractWrapper);
    this.sales = new ContractPrimarySale(this.contractWrapper);
    this.platformFees = new ContractPlatformFee(this.contractWrapper);
    this.interceptor = new ContractInterceptor(this.contractWrapper);
    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);
  }
  async getVoteBalance() {
    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());
  }
  async getVoteBalanceOf(account) {
    return await this.erc20.getValue(await this.contractWrapper.read("getVotes", [await resolveAddress(account)]));
  }
  async getDelegation() {
    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());
  }
  async getDelegationOf(account) {
    return await this.contractWrapper.read("delegates", [await resolveAddress(account)]);
  }
  async isTransferRestricted() {
    const anyoneCanTransfer = await this.contractWrapper.read("hasRole", [getRoleHash("transfer"), lib_exports.AddressZero]);
    return !anyoneCanTransfer;
  }
  async prepare(method, args, overrides) {
    return Transaction.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method,
      args,
      overrides
    });
  }
  async call(functionName, args, overrides) {
    return this.contractWrapper.call(functionName, args, overrides);
  }
};
var TokenDrop = _TokenDrop;
__publicField(TokenDrop, "contractRoles", TOKEN_DROP_CONTRACT_ROLES);
export {
  TokenDrop
};
//# sourceMappingURL=token-drop-4d5b8155.browser.esm-64PQMJFU.js.map
